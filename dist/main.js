(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(537),r=t.n(a),i=t(645),o=t.n(i)()(r());o.push([e.id,'body, html{\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    font-family: BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", \n    "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", \n    "Helvetica Neue", "Helvetica", "Arial", sans-serif;\n}\n\n#layout{\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    background: linear-gradient(#acacac, #575757);\n}\n\n#header{\n    height: 10%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\np{\n    font-size: 40px;\n}\n\n#game-box{\n    height: 90%;\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n#player-input-content{\n    font-size: 24px;\n    height: 200px;\n    width: 200px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n}\n\n#start, #play{\n    height: 60px;\n    width: 150px;\n    border: 2px solid black;\n    border-radius: 5px;\n    font-size: 40px;\n    background: linear-gradient(#4762fa, #003172);\n\n}\n\n#start:hover, #play:hover{\n    color:white\n}\n\n.gameboard {\n    height: 400px;\n    width: 400px;\n    margin: 0;\n    padding: 0;\n    display: grid;\n    grid-template-rows: repeat(var(--grid-rows),1fr);\n    grid-template-columns: repeat(var(--grid-cols),1fr);\n    background-color: rgb(198, 228, 255);\n    border-color: black;\n    border-width: 5px;\n    border: black;\n    border-style: solid;\n}\n\n.box{\n    border: .5px solid grey;\n}\n\n.box:hover{\n    background-color: grey;\n}\n\n.has-ship{\n    background-color: rgb(196, 196, 196);\n}\n\n.hit{\n    background-color: rgb(179, 255, 179);\n}\n\n.ship-hit{\n    background-color: rgb(253, 171, 171);\n}\n\n.axis-box{\n    height: 25x;\n    width: 70px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n    border: black 1px solid;\n    border-radius: 5px;\n    background-color: black;\n}\n\n.player-input-description{\n    height: 150px;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.x, .y{\n    height: 25px;\n    width: 35px;\n    border: black solid 2px;\n    border-radius: 5px;\n    font-size: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.active{\n    background-color: white;\n    color: black\n}\n\n.inactive{\n    background-color: black;\n    color: white;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,WAAW;IACX,SAAS;IACT,UAAU;IACV;;sDAEkD;AACtD;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,SAAS;IACT,UAAU;IACV,6CAA6C;AACjD;;AAEA;IACI,WAAW;IACX,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,WAAW;IACX,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,aAAa;IACb,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,6BAA6B;AACjC;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,uBAAuB;IACvB,kBAAkB;IAClB,eAAe;IACf,6CAA6C;;AAEjD;;AAEA;IACI;AACJ;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,SAAS;IACT,UAAU;IACV,aAAa;IACb,gDAAgD;IAChD,mDAAmD;IACnD,oCAAoC;IACpC,mBAAmB;IACnB,iBAAiB;IACjB,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,WAAW;IACX,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,6BAA6B;IAC7B,mBAAmB;IACnB,uBAAuB;IACvB,kBAAkB;IAClB,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,uBAAuB;IACvB,kBAAkB;IAClB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,uBAAuB;IACvB;AACJ;;AAEA;IACI,uBAAuB;IACvB,YAAY;AAChB",sourcesContent:['body, html{\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    font-family: BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", \n    "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", \n    "Helvetica Neue", "Helvetica", "Arial", sans-serif;\n}\n\n#layout{\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    background: linear-gradient(#acacac, #575757);\n}\n\n#header{\n    height: 10%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\np{\n    font-size: 40px;\n}\n\n#game-box{\n    height: 90%;\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n#player-input-content{\n    font-size: 24px;\n    height: 200px;\n    width: 200px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n}\n\n#start, #play{\n    height: 60px;\n    width: 150px;\n    border: 2px solid black;\n    border-radius: 5px;\n    font-size: 40px;\n    background: linear-gradient(#4762fa, #003172);\n\n}\n\n#start:hover, #play:hover{\n    color:white\n}\n\n.gameboard {\n    height: 400px;\n    width: 400px;\n    margin: 0;\n    padding: 0;\n    display: grid;\n    grid-template-rows: repeat(var(--grid-rows),1fr);\n    grid-template-columns: repeat(var(--grid-cols),1fr);\n    background-color: rgb(198, 228, 255);\n    border-color: black;\n    border-width: 5px;\n    border: black;\n    border-style: solid;\n}\n\n.box{\n    border: .5px solid grey;\n}\n\n.box:hover{\n    background-color: grey;\n}\n\n.has-ship{\n    background-color: rgb(196, 196, 196);\n}\n\n.hit{\n    background-color: rgb(179, 255, 179);\n}\n\n.ship-hit{\n    background-color: rgb(253, 171, 171);\n}\n\n.axis-box{\n    height: 25x;\n    width: 70px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n    border: black 1px solid;\n    border-radius: 5px;\n    background-color: black;\n}\n\n.player-input-description{\n    height: 150px;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.x, .y{\n    height: 25px;\n    width: 35px;\n    border: black solid 2px;\n    border-radius: 5px;\n    font-size: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.active{\n    background-color: white;\n    color: black\n}\n\n.inactive{\n    background-color: black;\n    color: white;\n}'],sourceRoot:""}]);const s=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",a=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),a&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),a&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,a,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(a)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);a&&o[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(r," */"),o=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,a=0;a<n.length;a++)if(n[a].identifier===e){t=a;break}return t}function a(e,a){for(var i={},o=[],s=0;s<e.length;s++){var c=e[s],l=a.base?c[0]+a.base:c[0],d=i[l]||0,A="".concat(l," ").concat(d);i[l]=d+1;var p=t(A),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(h);else{var u=r(h,a);a.byIndex=s,n.splice(s,0,{identifier:A,updater:u,references:1})}o.push(A)}return o}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var i=a(e=e||[],r=r||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var s=t(i[o]);n[s].references--}for(var c=a(e,r),l=0;l<i.length;l++){var d=t(i[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=c}}},569:e=>{var n={};e.exports=function(e,t){var a=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,r&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(a,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(a){var r=n[a];if(void 0!==r)return r.exports;var i=n[a]={id:a,exports:{}};return e[a](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var a in n)t.o(n,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:n[a]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),a=t(795),r=t.n(a),i=t(569),o=t.n(i),s=t(565),c=t.n(s),l=t(216),d=t.n(l),A=t(589),p=t.n(A),h=t(426),u={};u.styleTagTransform=p(),u.setAttributes=c(),u.insert=o().bind(null,"head"),u.domAPI=r(),u.insertStyleElement=d(),n()(h.Z,u),h.Z&&h.Z.locals&&h.Z.locals;class m{constructor(e,n){this.name=e,this.size=n,this.position=[],this.beenHit=[]}hit(e){this.beenHit.includes(e)||this.beenHit.push(e)}isSunk(){return this.position.every((e=>this.beenHit.includes(e)))}}let b={Carrier:5,Battleship:4,Destroyer:3,Submarine:3,"Patrol Boat":2};class y{constructor(){this.board=[],this.ships=b,this.fleet=[],this.build()}build(){for(let e=0;e<100;e++)this.board.push({hasShip:!1,isHit:!1})}receiveAttack(e){this.board[e].isHit=!0,!0===this.board[e].hasShip&&this.attackShip(e)}attackShip(e){this.fleet.forEach(((n,t)=>{n.position.includes(e)&&(n.hit(e),n.isSunk()&&(this.fleet.splice(t,1),console.log(`${n.name} sank`)))}))}placeShip(e,n,t){let a=new m(n,this.ships[n]),r=this.createLocationArray(e,n,t);this.isValidPlacement(r)&&(r.forEach((e=>{this.board[e].hasShip=!0,a.position.push(e)})),this.fleet.push(a))}createLocationArray(e,n,t){const a=[];if("x"!==t)for(let t=0;t<this.ships[n];t++)a.push(e+10*t);else for(let t=0;t<this.ships[n];t++)a.push(e+t);return a}isValidPlacement(e){return!(e.length<=0||e.some((e=>!this.board[e]))||e.some((e=>this.board[e].hasShip))||[9,19,29,39,49,59,69,79,89].some((n=>[n,n+1].every((n=>e.includes(n))))))}computerShipPlacement(){let e=["x","y"];Object.keys(this.ships).forEach((n=>{let t=[],a="",r="";for(;!this.isValidPlacement(t);)a=Math.floor(99*Math.random()),r=Math.floor(2*Math.random()),t=this.createLocationArray(a,n,e[r]);this.placeShip(a,n,e[r])}))}computerTurn(e,n){const t=document.querySelectorAll(".player");let a=Math.floor(99*Math.random());n.gameboard.receiveAttack(a),t[a].classList.remove("empty"),t[a].classList.add("hit"),!0===n.gameboard.board[a].hasShip&&(t[a].classList.add("ship-hit"),t[a].classList.remove("has-ship")),e.winCheck(n.gameboard)&&this.displayWinner(e,n)}}class g{constructor(e){this.name=e,this.gameboard=new y}turn(e,n){if(!0!==n.board[e].isHit)return n.receiveAttack(e),void this.winCheck(n)}winCheck(e){return!(e.fleet.length>0||(console.log(`${this.name} Wins!`),0))}}class C{constructor(){this.shipNames=Object.keys(b)}startDOM(e,n){document.getElementById("start").addEventListener("click",(()=>{this.clearGameBox(),this.createGameboard(e),this.createPlayerPlacementUI(e,n)}))}playGame(e,n){n.gameboard.computerShipPlacement(),this.clearGameBox(),this.createGameboard(e,n),this.createGameboard(n,e)}clearGameBox(){const e=document.getElementById("game-box");for(;e.hasChildNodes();)e.removeChild(e.lastChild)}createGameboard(e,n){const t=document.getElementById("game-box"),a=document.createElement("div");t.appendChild(a),a.classList=`gameboard ${e.name}board`,a.style.setProperty("--grid-rows",10),a.style.setProperty("--grid-cols",10),e.gameboard.board.forEach(((t,r)=>{let i=document.createElement("div");i.dataset.index=r,a.appendChild(i).classList.add("box","empty",`${e.name}`),"player"===e.name?t.hasShip&&i.classList.add("has-ship"):i.addEventListener("click",(()=>{e.turn(r,n.gameboard),i.classList.remove("empty"),console.log("shot"),!0!==n.gameboard.board[r].hasShip?i.classList.add("hit"):i.classList.add("ship-hit"),e.winCheck(n.gameboard)||n.winCheck(e.gameboard)?this.displayWinner(e,n):e.gameboard.computerTurn(e,n)}))}))}displayWinner(e,n){if(e.winCheck(n.gameboard)){let n=this.createWinDisplay(e);const t=document.querySelector(".playerboard");for(;t.hasChildNodes();)t.remove(t.lastchild);return t.appendChild(n),!1}if(n.winCheck(e.gameboard)){let n=this.createWinDisplay(e);const t=document.querySelector(".computerboard");for(;t.hasChildNodes();)t.remove(t.lastchild);return t.appendChild(n),!1}}createWinDisplay(e){const n=document.createElement("div");return n.innerHTML=`${e.name} Wins`,n}createPlayerPlacementUI(e,n){this.createPlayerInputDOMElements();const t=document.querySelectorAll(".player"),a=document.querySelector(".player-input-description"),r=document.querySelectorAll(".axis-button");let i=0;r.forEach((e=>{e.addEventListener("click",(()=>{this.changeActiveAxis(e)}))})),t.forEach((r=>{i>5||r.addEventListener("click",(()=>{let o=this.getAxis(),s=e.gameboard.createLocationArray(parseInt(r.dataset.index),this.shipNames[i],o);e.gameboard.isValidPlacement(s)&&(e.gameboard.placeShip(parseInt(r.dataset.index),this.shipNames[i],o),s.forEach((e=>{t[e].classList.add("has-ship")})),i++,i<5?a.innerText=`Please place your: ${this.shipNames[i]}`:(this.createPlayGameButton(),document.getElementById("play").addEventListener("click",(()=>{this.playGame(e,n)}))))}))}))}createPlayerInputDOMElements(){const e=document.getElementById("game-box"),n=document.createElement("div"),t=document.createElement("div"),a=document.createElement("div"),r=document.createElement("button"),i=document.createElement("button");e.className="player-input",r.classList.add("x","active","axis-button"),r.innerHTML="x",r.value="x",i.classList.add("y","inactive","axis-button"),i.innerHTML="y",i.value="y",a.className="axis-box",a.appendChild(r),a.appendChild(i),t.className="player-input-description",t.innerText="Please place your: Carrier",n.id="player-input-content",n.appendChild(a),n.appendChild(t),e.appendChild(n)}createPlayGameButton(){const e=document.querySelector(".player-input-description"),n=document.createElement("button"),t=document.querySelector(".axis-box");for(;t.hasChildNodes();)t.removeChild(t.lastChild),t.classList.remove("axis-box");n.innerHTML="Play",n.id="play",e.innerText="",e.appendChild(n)}changeActiveAxis(e){if(e.classList.contains("inactive"))if(e.classList.add("active"),e.classList.remove("inactive"),"x"==e.value){let e=document.querySelector(".y");e.classList.add("inactive"),e.classList.remove("active")}else{let e=document.querySelector(".x");e.classList.remove("active"),e.classList.add("inactive")}}getAxis(){return document.querySelector(".active").value}}(new class{constructor(){this.player1=new g("player"),this.player2=new g("computer"),this.DOMcontroller=new C(this.player1,this.player2)}run(){this.DOMcontroller.startDOM(this.player1,this.player2)}}).run()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,