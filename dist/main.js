(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([e.id,'body, html{\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    font-family: BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", \n    "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", \n    "Helvetica Neue", "Helvetica", "Arial", sans-serif;\n}\n\n#layout{\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    background: linear-gradient(#acacac, #575757);\n}\n\n#header{\n    height: 10%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\np{\n    font-size: 24px;\n}\n\n#game-box{\n    height: 90%;\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n.gameboard {\n    height: 300px;\n    width: 300px;\n    margin: 0;\n    padding: 0;\n    display: grid;\n    grid-template-rows: repeat(var(--grid-rows),1fr);\n    grid-template-columns: repeat(var(--grid-cols),1fr);\n    background-color: white;\n    border-color: black;\n    border-width: 5px;\n    border: black;\n    border-style: solid;\n}\n\n.box{\n    border: .5px solid grey;\n}\n\n.box:hover{\n    background-color: grey;\n}\n\n.hit{\n    background-color: green;\n}\n\n.ship-hit{\n    background-color: red;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,WAAW;IACX,SAAS;IACT,UAAU;IACV;;sDAEkD;AACtD;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,SAAS;IACT,UAAU;IACV,6CAA6C;AACjD;;AAEA;IACI,WAAW;IACX,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,WAAW;IACX,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,SAAS;IACT,UAAU;IACV,aAAa;IACb,gDAAgD;IAChD,mDAAmD;IACnD,uBAAuB;IACvB,mBAAmB;IACnB,iBAAiB;IACjB,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,qBAAqB;AACzB",sourcesContent:['body, html{\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    font-family: BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", \n    "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", \n    "Helvetica Neue", "Helvetica", "Arial", sans-serif;\n}\n\n#layout{\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    background: linear-gradient(#acacac, #575757);\n}\n\n#header{\n    height: 10%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\np{\n    font-size: 24px;\n}\n\n#game-box{\n    height: 90%;\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n.gameboard {\n    height: 300px;\n    width: 300px;\n    margin: 0;\n    padding: 0;\n    display: grid;\n    grid-template-rows: repeat(var(--grid-rows),1fr);\n    grid-template-columns: repeat(var(--grid-cols),1fr);\n    background-color: white;\n    border-color: black;\n    border-width: 5px;\n    border: black;\n    border-style: solid;\n}\n\n.box{\n    border: .5px solid grey;\n}\n\n.box:hover{\n    background-color: grey;\n}\n\n.hit{\n    background-color: green;\n}\n\n.ship-hit{\n    background-color: red;\n}'],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],d=o[l]||0,A="".concat(l," ").concat(d);o[l]=d+1;var p=t(A),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var h=a(u,r);r.byIndex=s,n.splice(s,0,{identifier:A,updater:h,references:1})}i.push(A)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=t(o[i]);n[s].references--}for(var c=r(e,a),l=0;l<o.length;l++){var d=t(o[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}o=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),o=t(569),i=t.n(o),s=t(565),c=t.n(s),l=t(216),d=t.n(l),A=t(589),p=t.n(A),u=t(426),h={};h.styleTagTransform=p(),h.setAttributes=c(),h.insert=i().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=d(),n()(u.Z,h),u.Z&&u.Z.locals&&u.Z.locals;class m{constructor(e,n){this.name=e,this.size=n,this.position=[],this.beenHit=[]}hit(e){this.beenHit.includes(e)||this.beenHit.push(e)}isSunk(){return this.position.every((e=>this.beenHit.includes(e)))}}let f={Carrier:5,Battleship:4,Destroyer:3,Submarine:3,"Patrol Boat":2};class g{constructor(){this.board=[],this.ships=f,this.fleet=[],this.build()}build(){for(let e=0;e<100;e++)this.board.push({hasShip:!1,isHit:!1})}receiveAttack(e){this.board[e].isHit=!0,!0===this.board[e].hasShip&&this.attackShip(e)}attackShip(e){this.fleet.forEach((n=>{n.position.includes(e)&&n.hit(e)}))}placeShip(e,n,t){let r=new m(n,this.ships[n]),a=this.createLocationArray(e,r,t);this.checkPlacement(a)&&(a.forEach((e=>{this.board[e].hasShip=!0,r.position.push(e)})),this.fleet.push(r))}createLocationArray(e,n,t){const r=[];if("x"===t)for(let t=0;t<n.size;t++)r.push(e+t);else for(let t=0;t<n.size;t++)r.push(e+10*t);return r}checkPlacement(e){return!e.some((e=>!this.board[e]))&&!e.some((e=>this.board[e].hasShip))&&![9,19,29,39,49,59,69,79,89,99].some((n=>[n,n+1].every((n=>e.includes(n)))))}}class b{constructor(){this.gameboard=new g}turn(e,n){!0!==n.board[e].isHit&&(n.receiveAttack(e),n.fleet.forEach((e=>{e.isSunk()&&console.log(`${e.name} sank`)})))}}class y{runDOM(e,n){this.createGameboard(e),this.createGameboard(n)}createGameboard(e){const n=document.getElementById("game-box"),t=document.createElement("div");n.appendChild(t),t.className="gameboard",t.style.setProperty("--grid-rows",10),t.style.setProperty("--grid-cols",10),e.gameboard.board.forEach(((e,n)=>{let r=document.createElement("div");r.dataset.index=n,t.appendChild(r).classList.add("box","empty")}))}playerTurn(e,n){document.querySelectorAll(".box").forEach((t=>{t.addEventListener("click",(()=>{e.turn(t.dataset.index,n.gameboard),t.classList.remove("empty"),!0!==n.gameboard.board[t.dataset.index].hasShip?t.classList.add("hit"):t.classList.add("ship-hit")}))}))}}(new class{constructor(){this.player1=new b,this.player2=new b,this.DOMcontroller=new y(this.player1,this.player2)}run(){this.player2.gameboard.placeShip(2,"Carrier","x"),this.player2.gameboard.placeShip(45,"Submarine","y"),this.DOMcontroller.runDOM(this.player1,this.player2),this.DOMcontroller.playerTurn(this.player1,this.player2)}}).run()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,