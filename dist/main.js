(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([e.id,'body, html{\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    font-family: BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", \n    "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", \n    "Helvetica Neue", "Helvetica", "Arial", sans-serif;\n}\n\n#layout{\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    background: linear-gradient(#acacac, #575757);\n}\n\n#header{\n    height: 10%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\np{\n    font-size: 40px;\n}\n\n#game-box{\n    height: 90%;\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n#player-input-content{\n    font-size: 24px;\n    height: 200px;\n    width: 200px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n}\n\n#start, #play{\n    height: 60px;\n    width: 150px;\n    border: 2px solid black;\n    border-radius: 5px;\n    font-size: 40px;\n    background: linear-gradient(#4762fa, #003172);\n\n}\n\n#start:hover{\n    color:white\n}\n\n.gameboard {\n    height: 400px;\n    width: 400px;\n    margin: 0;\n    padding: 0;\n    display: grid;\n    grid-template-rows: repeat(var(--grid-rows),1fr);\n    grid-template-columns: repeat(var(--grid-cols),1fr);\n    background-color: rgb(198, 228, 255);\n    border-color: black;\n    border-width: 5px;\n    border: black;\n    border-style: solid;\n}\n\n.box{\n    border: .5px solid grey;\n}\n\n.box:hover{\n    background-color: grey;\n}\n\n.has-ship{\n    background-color: rgb(196, 196, 196);\n}\n\n.hit{\n    background-color: rgb(179, 255, 179);\n}\n\n.ship-hit{\n    background-color: rgb(253, 171, 171);\n}\n\n.axis-box{\n    height: 25x;\n    width: 70px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n    border: black 1px solid;\n    border-radius: 5px;\n    background-color: black;\n}\n\n.player-input-description{\n    height: 150px;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.x, .y{\n    height: 25px;\n    width: 35px;\n    border: black solid 2px;\n    border-radius: 5px;\n    font-size: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.active{\n    background-color: white;\n    color: black\n}\n\n.inactive{\n    background-color: black;\n    color: white;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,WAAW;IACX,SAAS;IACT,UAAU;IACV;;sDAEkD;AACtD;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,SAAS;IACT,UAAU;IACV,6CAA6C;AACjD;;AAEA;IACI,WAAW;IACX,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,WAAW;IACX,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,aAAa;IACb,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,6BAA6B;AACjC;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,uBAAuB;IACvB,kBAAkB;IAClB,eAAe;IACf,6CAA6C;;AAEjD;;AAEA;IACI;AACJ;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,SAAS;IACT,UAAU;IACV,aAAa;IACb,gDAAgD;IAChD,mDAAmD;IACnD,oCAAoC;IACpC,mBAAmB;IACnB,iBAAiB;IACjB,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,WAAW;IACX,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,6BAA6B;IAC7B,mBAAmB;IACnB,uBAAuB;IACvB,kBAAkB;IAClB,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,uBAAuB;IACvB,kBAAkB;IAClB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,uBAAuB;IACvB;AACJ;;AAEA;IACI,uBAAuB;IACvB,YAAY;AAChB",sourcesContent:['body, html{\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    font-family: BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", \n    "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", \n    "Helvetica Neue", "Helvetica", "Arial", sans-serif;\n}\n\n#layout{\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    background: linear-gradient(#acacac, #575757);\n}\n\n#header{\n    height: 10%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\np{\n    font-size: 40px;\n}\n\n#game-box{\n    height: 90%;\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n#player-input-content{\n    font-size: 24px;\n    height: 200px;\n    width: 200px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n}\n\n#start, #play{\n    height: 60px;\n    width: 150px;\n    border: 2px solid black;\n    border-radius: 5px;\n    font-size: 40px;\n    background: linear-gradient(#4762fa, #003172);\n\n}\n\n#start:hover{\n    color:white\n}\n\n.gameboard {\n    height: 400px;\n    width: 400px;\n    margin: 0;\n    padding: 0;\n    display: grid;\n    grid-template-rows: repeat(var(--grid-rows),1fr);\n    grid-template-columns: repeat(var(--grid-cols),1fr);\n    background-color: rgb(198, 228, 255);\n    border-color: black;\n    border-width: 5px;\n    border: black;\n    border-style: solid;\n}\n\n.box{\n    border: .5px solid grey;\n}\n\n.box:hover{\n    background-color: grey;\n}\n\n.has-ship{\n    background-color: rgb(196, 196, 196);\n}\n\n.hit{\n    background-color: rgb(179, 255, 179);\n}\n\n.ship-hit{\n    background-color: rgb(253, 171, 171);\n}\n\n.axis-box{\n    height: 25x;\n    width: 70px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n    border: black 1px solid;\n    border-radius: 5px;\n    background-color: black;\n}\n\n.player-input-description{\n    height: 150px;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.x, .y{\n    height: 25px;\n    width: 35px;\n    border: black solid 2px;\n    border-radius: 5px;\n    font-size: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.active{\n    background-color: white;\n    color: black\n}\n\n.inactive{\n    background-color: black;\n    color: white;\n}'],sourceRoot:""}]);const s=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var l=0;l<e.length;l++){var A=[].concat(e[l]);r&&o[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),a&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=a):A[4]="".concat(a)),n.push(A))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */"),o=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},o=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],A=i[l]||0,d="".concat(l," ").concat(A);i[l]=A+1;var p=t(d),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var h=a(u,r);r.byIndex=s,n.splice(s,0,{identifier:d,updater:h,references:1})}o.push(d)}return o}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var s=t(i[o]);n[s].references--}for(var c=r(e,a),l=0;l<i.length;l++){var A=t(i[l]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}i=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),i=t(569),o=t.n(i),s=t(565),c=t.n(s),l=t(216),A=t.n(l),d=t(589),p=t.n(d),u=t(426),h={};h.styleTagTransform=p(),h.setAttributes=c(),h.insert=o().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=A(),n()(u.Z,h),u.Z&&u.Z.locals&&u.Z.locals;class m{constructor(e,n){this.name=e,this.size=n,this.position=[],this.beenHit=[]}hit(e){this.beenHit.includes(e)||this.beenHit.push(e)}isSunk(){return this.position.every((e=>this.beenHit.includes(e)))}}let b={Carrier:5,Battleship:4,Destroyer:3,Submarine:3,"Patrol Boat":2};class y{constructor(){this.board=[],this.ships=b,this.fleet=[],this.build()}build(){for(let e=0;e<100;e++)this.board.push({hasShip:!1,isHit:!1})}receiveAttack(e){this.board[e].isHit=!0,!0===this.board[e].hasShip&&this.attackShip(e)}attackShip(e){this.fleet.forEach(((n,t)=>{n.position.includes(e)&&(n.hit(e),n.isSunk()&&(this.fleet.slice(t,1),console.log(`${n.name} sank`)))}))}placeShip(e,n,t){let r=new m(n,this.ships[n]),a=this.createLocationArray(e,n,t);this.isValidPlacement(a)&&(a.forEach((e=>{this.board[e].hasShip=!0,r.position.push(e)})),this.fleet.push(r))}createLocationArray(e,n,t){const r=[];if("x"!==t)for(let t=0;t<this.ships[n];t++)r.push(e+10*t);else for(let t=0;t<this.ships[n];t++)r.push(e+t);return r}isValidPlacement(e){return!(e.length<=0||e.some((e=>!this.board[e]))||e.some((e=>this.board[e].hasShip))||[9,19,29,39,49,59,69,79,89].some((n=>[n,n+1].every((n=>e.includes(n))))))}computerShipPlacement(){let e=["x","y"];Object.keys(this.ships).forEach((n=>{let t=[],r="",a="";for(;!this.isValidPlacement(t);)r=Math.floor(99*Math.random()),a=Math.floor(2*Math.random()),t=this.createLocationArray(r,n,e[a]);this.placeShip(r,n,e[a])}))}}class g{constructor(e){this.name=e,this.gameboard=new y}turn(e,n){!0!==n.board[e].isHit&&n.receiveAttack(e)}}class C{constructor(){this.shipNames=Object.keys(b)}runDOM(e,n){document.getElementById("start").addEventListener("click",(()=>{this.clearGameBox(),this.createGameboard(e),this.createPlayerPlacementUI(e)}))}clearGameBox(){const e=document.getElementById("game-box");for(;e.hasChildNodes();)e.removeChild(e.lastChild)}createGameboard(e){const n=document.getElementById("game-box"),t=document.createElement("div");n.appendChild(t),t.className="gameboard",t.style.setProperty("--grid-rows",10),t.style.setProperty("--grid-cols",10),e.gameboard.board.forEach(((n,r)=>{let a=document.createElement("div");a.dataset.index=r,t.appendChild(a).classList.add("box","empty",`${e.name}`)}))}playerTurn(e,n){document.querySelectorAll(`.${n.name}`).forEach(((t,r)=>{t.addEventListener("click",(()=>{e.turn(r,n.gameboard),t.classList.remove("empty"),!0!==n.gameboard.board[r].hasShip?t.classList.add("hit"):t.classList.add("ship-hit")}))}))}createPlayerPlacementUI(e){this.createPlayerInputDOMElements();const n=document.querySelectorAll(".player"),t=document.querySelector(".player-input-description"),r=document.querySelectorAll(".axis-button");let a=0;r.forEach((e=>{e.addEventListener("click",(()=>{this.changeActiveAxis()}))})),n.forEach((r=>{a>5||r.addEventListener("click",(()=>{let i=this.getAxis(),o=e.gameboard.createLocationArray(parseInt(r.dataset.index),this.shipNames[a],i);e.gameboard.isValidPlacement(o)&&(e.gameboard.placeShip(parseInt(r.dataset.index),this.shipNames[a],i),o.forEach((e=>{n[e].classList.add("has-ship")})),a++,a<5?t.innerText=`Please place your: ${this.shipNames[a]}`:this.createPlayGameButton())}))}))}createPlayerInputDOMElements(){const e=document.getElementById("game-box"),n=document.createElement("div"),t=document.createElement("div"),r=document.createElement("div"),a=document.createElement("button"),i=document.createElement("button");e.className="player-input",a.classList.add("x","active","axis-button"),a.innerHTML="x",a.value="x",i.classList.add("y","inactive","axis-button"),i.innerHTML="y",i.value="y",r.className="axis-box",r.appendChild(a),r.appendChild(i),t.className="player-input-description",t.innerText="Please place your: Carrier",n.id="player-input-content",n.appendChild(r),n.appendChild(t),e.appendChild(n)}createPlayGameButton(){const e=document.querySelector(".player-input-description"),n=document.createElement("button"),t=document.querySelector(".axis-box");for(;t.hasChildNodes();)t.removeChild(t.lastChild),t.classList.remove("axis-box");n.innerHTML="Play",n.id="play",e.innerText="",e.appendChild(n)}changeActiveAxis(){let e=document.querySelector(".active"),n=document.querySelector(".inactive");n.classList.remove("inactive"),n.classList.add("acitve"),e.classList.remove("active"),e.classList.add("inactive")}getAxis(){return document.querySelector(".active").value}}(new class{constructor(){this.player1=new g("player"),this.player2=new g("computer"),this.DOMcontroller=new C(this.player1,this.player2)}run(){this.DOMcontroller.runDOM(this.player1,this.player2),this.DOMcontroller.playerTurn(this.player1,this.player2)}}).run()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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WCxNQUVJdEYsY0FDSW5ILEtBQUtvSyxRQUFVLElBQUlOLEVBQU8sVUFDMUI5SixLQUFLcUssUUFBVSxJQUFJUCxFQUFPLFlBQzFCOUosS0FBS2lLLGNBQWdCLElBQUlBLEVBQWNqSyxLQUFLb0ssUUFBU3BLLEtBQUtxSyxTQUc5RHdDLE1BQ0k3TSxLQUFLaUssY0FBY0UsT0FBT25LLEtBQUtvSyxRQUFTcEssS0FBS3FLLFNBQzdDckssS0FBS2lLLGNBQWNxQixXQUFXdEwsS0FBS29LLFFBQVNwSyxLQUFLcUssWUFLcER3QyxPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvYXBwL3NoaXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvYXBwL3NoaXBUeXBlcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2FwcC9nYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9hcHAvcGxheWVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvRE9NL0RPTXNjcmlwdHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImJvZHksIGh0bWx7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgZm9udC1mYW1pbHk6IEJsaW5rTWFjU3lzdGVtRm9udCwgLWFwcGxlLXN5c3RlbSwgXFxcIlNlZ29lIFVJXFxcIiwgXFxcIlJvYm90b1xcXCIsIFxcbiAgICBcXFwiT3h5Z2VuXFxcIiwgXFxcIlVidW50dVxcXCIsIFxcXCJDYW50YXJlbGxcXFwiLCBcXFwiRmlyYSBTYW5zXFxcIiwgXFxcIkRyb2lkIFNhbnNcXFwiLCBcXG4gICAgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgXFxcIkhlbHZldGljYVxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7XFxufVxcblxcbiNsYXlvdXR7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KCNhY2FjYWMsICM1NzU3NTcpO1xcbn1cXG5cXG4jaGVhZGVye1xcbiAgICBoZWlnaHQ6IDEwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG5we1xcbiAgICBmb250LXNpemU6IDQwcHg7XFxufVxcblxcbiNnYW1lLWJveHtcXG4gICAgaGVpZ2h0OiA5MCU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuI3BsYXllci1pbnB1dC1jb250ZW50e1xcbiAgICBmb250LXNpemU6IDI0cHg7XFxuICAgIGhlaWdodDogMjAwcHg7XFxuICAgIHdpZHRoOiAyMDBweDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxufVxcblxcbiNzdGFydCwgI3BsYXl7XFxuICAgIGhlaWdodDogNjBweDtcXG4gICAgd2lkdGg6IDE1MHB4O1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBmb250LXNpemU6IDQwcHg7XFxuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgjNDc2MmZhLCAjMDAzMTcyKTtcXG5cXG59XFxuXFxuI3N0YXJ0OmhvdmVye1xcbiAgICBjb2xvcjp3aGl0ZVxcbn1cXG5cXG4uZ2FtZWJvYXJkIHtcXG4gICAgaGVpZ2h0OiA0MDBweDtcXG4gICAgd2lkdGg6IDQwMHB4O1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KHZhcigtLWdyaWQtcm93cyksMWZyKTtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQodmFyKC0tZ3JpZC1jb2xzKSwxZnIpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTk4LCAyMjgsIDI1NSk7XFxuICAgIGJvcmRlci1jb2xvcjogYmxhY2s7XFxuICAgIGJvcmRlci13aWR0aDogNXB4O1xcbiAgICBib3JkZXI6IGJsYWNrO1xcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbn1cXG5cXG4uYm94e1xcbiAgICBib3JkZXI6IC41cHggc29saWQgZ3JleTtcXG59XFxuXFxuLmJveDpob3ZlcntcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JleTtcXG59XFxuXFxuLmhhcy1zaGlwe1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTk2LCAxOTYsIDE5Nik7XFxufVxcblxcbi5oaXR7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNzksIDI1NSwgMTc5KTtcXG59XFxuXFxuLnNoaXAtaGl0e1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjUzLCAxNzEsIDE3MSk7XFxufVxcblxcbi5heGlzLWJveHtcXG4gICAgaGVpZ2h0OiAyNXg7XFxuICAgIHdpZHRoOiA3MHB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgYm9yZGVyOiBibGFjayAxcHggc29saWQ7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxufVxcblxcbi5wbGF5ZXItaW5wdXQtZGVzY3JpcHRpb257XFxuICAgIGhlaWdodDogMTUwcHg7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLngsIC55e1xcbiAgICBoZWlnaHQ6IDI1cHg7XFxuICAgIHdpZHRoOiAzNXB4O1xcbiAgICBib3JkZXI6IGJsYWNrIHNvbGlkIDJweDtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBmb250LXNpemU6IDIwcHg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uYWN0aXZle1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgY29sb3I6IGJsYWNrXFxufVxcblxcbi5pbmFjdGl2ZXtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLFlBQVk7SUFDWixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVjs7c0RBRWtEO0FBQ3REOztBQUVBO0lBQ0ksWUFBWTtJQUNaLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLDZDQUE2QztBQUNqRDs7QUFFQTtJQUNJLFdBQVc7SUFDWCxXQUFXO0lBQ1gsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksV0FBVztJQUNYLFdBQVc7SUFDWCxhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLDZCQUE2QjtJQUM3QixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsYUFBYTtJQUNiLFlBQVk7SUFDWixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLG1CQUFtQjtJQUNuQiw2QkFBNkI7QUFDakM7O0FBRUE7SUFDSSxZQUFZO0lBQ1osWUFBWTtJQUNaLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLDZDQUE2Qzs7QUFFakQ7O0FBRUE7SUFDSTtBQUNKOztBQUVBO0lBQ0ksYUFBYTtJQUNiLFlBQVk7SUFDWixTQUFTO0lBQ1QsVUFBVTtJQUNWLGFBQWE7SUFDYixnREFBZ0Q7SUFDaEQsbURBQW1EO0lBQ25ELG9DQUFvQztJQUNwQyxtQkFBbUI7SUFDbkIsaUJBQWlCO0lBQ2pCLGFBQWE7SUFDYixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSx1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxvQ0FBb0M7QUFDeEM7O0FBRUE7SUFDSSxvQ0FBb0M7QUFDeEM7O0FBRUE7SUFDSSxvQ0FBb0M7QUFDeEM7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsV0FBVztJQUNYLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsNkJBQTZCO0lBQzdCLG1CQUFtQjtJQUNuQix1QkFBdUI7SUFDdkIsa0JBQWtCO0lBQ2xCLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixXQUFXO0lBQ1gsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osV0FBVztJQUNYLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksdUJBQXVCO0lBQ3ZCO0FBQ0o7O0FBRUE7SUFDSSx1QkFBdUI7SUFDdkIsWUFBWTtBQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJib2R5LCBodG1se1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGZvbnQtZmFtaWx5OiBCbGlua01hY1N5c3RlbUZvbnQsIC1hcHBsZS1zeXN0ZW0sIFxcXCJTZWdvZSBVSVxcXCIsIFxcXCJSb2JvdG9cXFwiLCBcXG4gICAgXFxcIk94eWdlblxcXCIsIFxcXCJVYnVudHVcXFwiLCBcXFwiQ2FudGFyZWxsXFxcIiwgXFxcIkZpcmEgU2Fuc1xcXCIsIFxcXCJEcm9pZCBTYW5zXFxcIiwgXFxuICAgIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIFxcXCJIZWx2ZXRpY2FcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO1xcbn1cXG5cXG4jbGF5b3V0e1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgjYWNhY2FjLCAjNTc1NzU3KTtcXG59XFxuXFxuI2hlYWRlcntcXG4gICAgaGVpZ2h0OiAxMCU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxucHtcXG4gICAgZm9udC1zaXplOiA0MHB4O1xcbn1cXG5cXG4jZ2FtZS1ib3h7XFxuICAgIGhlaWdodDogOTAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbiNwbGF5ZXItaW5wdXQtY29udGVudHtcXG4gICAgZm9udC1zaXplOiAyNHB4O1xcbiAgICBoZWlnaHQ6IDIwMHB4O1xcbiAgICB3aWR0aDogMjAwcHg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xcbn1cXG5cXG4jc3RhcnQsICNwbGF5e1xcbiAgICBoZWlnaHQ6IDYwcHg7XFxuICAgIHdpZHRoOiAxNTBweDtcXG4gICAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgZm9udC1zaXplOiA0MHB4O1xcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoIzQ3NjJmYSwgIzAwMzE3Mik7XFxuXFxufVxcblxcbiNzdGFydDpob3ZlcntcXG4gICAgY29sb3I6d2hpdGVcXG59XFxuXFxuLmdhbWVib2FyZCB7XFxuICAgIGhlaWdodDogNDAwcHg7XFxuICAgIHdpZHRoOiA0MDBweDtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCh2YXIoLS1ncmlkLXJvd3MpLDFmcik7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KHZhcigtLWdyaWQtY29scyksMWZyKTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE5OCwgMjI4LCAyNTUpO1xcbiAgICBib3JkZXItY29sb3I6IGJsYWNrO1xcbiAgICBib3JkZXItd2lkdGg6IDVweDtcXG4gICAgYm9yZGVyOiBibGFjaztcXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG59XFxuXFxuLmJveHtcXG4gICAgYm9yZGVyOiAuNXB4IHNvbGlkIGdyZXk7XFxufVxcblxcbi5ib3g6aG92ZXJ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGdyZXk7XFxufVxcblxcbi5oYXMtc2hpcHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE5NiwgMTk2LCAxOTYpO1xcbn1cXG5cXG4uaGl0e1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTc5LCAyNTUsIDE3OSk7XFxufVxcblxcbi5zaGlwLWhpdHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1MywgMTcxLCAxNzEpO1xcbn1cXG5cXG4uYXhpcy1ib3h7XFxuICAgIGhlaWdodDogMjV4O1xcbiAgICB3aWR0aDogNzBweDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGJvcmRlcjogYmxhY2sgMXB4IHNvbGlkO1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xcbn1cXG5cXG4ucGxheWVyLWlucHV0LWRlc2NyaXB0aW9ue1xcbiAgICBoZWlnaHQ6IDE1MHB4O1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi54LCAueXtcXG4gICAgaGVpZ2h0OiAyNXB4O1xcbiAgICB3aWR0aDogMzVweDtcXG4gICAgYm9yZGVyOiBibGFjayBzb2xpZCAycHg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLmFjdGl2ZXtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIGNvbG9yOiBibGFja1xcbn1cXG5cXG4uaW5hY3RpdmV7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xcbiAgICBjb2xvcjogd2hpdGU7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImNsYXNzIFNoaXAge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHNpemUpe1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgICAgIHRoaXMuc2l6ZSA9IHNpemVcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IFtdXG4gICAgICAgIHRoaXMuYmVlbkhpdCA9IFtdXG4gICAgfVxuXG4gICAgaGl0KG51bSkge1xuICAgICAgICBpZiAodGhpcy5iZWVuSGl0LmluY2x1ZGVzKG51bSkpe1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHRoaXMuYmVlbkhpdC5wdXNoKG51bSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzU3VuayAoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24uZXZlcnkobnVtID0+e1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmVlbkhpdC5pbmNsdWRlcyhudW0pXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5leHBvcnQge1NoaXB9IiwiaW1wb3J0IHtTaGlwfSBmcm9tICcuL3NoaXBzJ1xuXG5sZXQgc2hpcFR5cGVzID0geydDYXJyaWVyJzogNSwgJ0JhdHRsZXNoaXAnOiA0LCAnRGVzdHJveWVyJzogMywgJ1N1Ym1hcmluZSc6IDMsICdQYXRyb2wgQm9hdCc6IDJ9XG5cbmV4cG9ydCB7c2hpcFR5cGVzfSIsImltcG9ydCB7U2hpcH0gZnJvbSAnLi9zaGlwcydcbmltcG9ydCB7c2hpcFR5cGVzfSBmcm9tICcuL3NoaXBUeXBlcydcblxuY2xhc3MgR2FtZWJvYXJkIHtcblxuICAgIGNvbnN0cnVjdG9yICgpe1xuICAgICAgICB0aGlzLmJvYXJkID0gW11cbiAgICAgICAgdGhpcy5zaGlwcyA9IHNoaXBUeXBlc1xuICAgICAgICB0aGlzLmZsZWV0ID0gW11cbiAgICAgICAgdGhpcy5idWlsZCgpXG4gICAgfVxuXG4gICAgYnVpbGQoKXtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPDEwMDsgaSsrKXtcbiAgICAgICAgICAgIHRoaXMuYm9hcmQucHVzaCh7aGFzU2hpcDogZmFsc2UsIGlzSGl0OiBmYWxzZX0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWNlaXZlQXR0YWNrKGxvY2F0aW9uKXtcbiAgICAgICAgdGhpcy5ib2FyZFtsb2NhdGlvbl0uaXNIaXQgPSB0cnVlXG4gICAgICAgIGlmKHRoaXMuYm9hcmRbbG9jYXRpb25dLmhhc1NoaXAgIT09IHRydWUpe1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNrU2hpcChsb2NhdGlvbilcbiAgICAgICAgfSBcbiAgICB9XG5cbiAgICBhdHRhY2tTaGlwKGxvY2F0aW9uKXtcbiAgICAgICAgdGhpcy5mbGVldC5mb3JFYWNoKChib2F0LGkpPT57XG4gICAgICAgICAgICBpZiAoIWJvYXQucG9zaXRpb24uaW5jbHVkZXMobG9jYXRpb24pKXtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgYm9hdC5oaXQobG9jYXRpb24pXG4gICAgICAgICAgICAgICAgaWYgKCFib2F0LmlzU3VuaygpKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZsZWV0LnNsaWNlKGksMSlcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCR7Ym9hdC5uYW1lfSBzYW5rYClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICB9XG5cbiAgICBwbGFjZVNoaXAobG9jYXRpb24sIHNoaXBOYW1lLCBheGlzKXtcbiAgICAgICAgbGV0IHNoaXAgPSBuZXcgU2hpcChzaGlwTmFtZSwgdGhpcy5zaGlwc1tzaGlwTmFtZV0pXG4gICAgICAgIGxldCBsb2NhdGlvbkFycmF5ID0gdGhpcy5jcmVhdGVMb2NhdGlvbkFycmF5KGxvY2F0aW9uLCBzaGlwTmFtZSwgYXhpcylcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1ZhbGlkUGxhY2VtZW50KGxvY2F0aW9uQXJyYXkpKXtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgbG9jYXRpb25BcnJheS5mb3JFYWNoKGxvYyA9PntcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ib2FyZFtsb2NdLmhhc1NoaXAgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIHNoaXAucG9zaXRpb24ucHVzaChsb2MpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgdGhpcy5mbGVldC5wdXNoKHNoaXApXG4gICAgfVxuXG4gICAgY3JlYXRlTG9jYXRpb25BcnJheShsb2NhdGlvbiwgc2hpcE5hbWUsIGF4aXMpe1xuICAgICAgICBjb25zdCBsb2NhdGlvbkFycmF5ID0gW11cbiAgICAgICAgaWYgKGF4aXMgIT09ICd4Jyl7XG4gICAgICAgICAgICBmb3IobGV0IGk9MDsgaSA8IHRoaXMuc2hpcHNbc2hpcE5hbWVdO2krKyl7XG4gICAgICAgICAgICAgICAgbG9jYXRpb25BcnJheS5wdXNoKGxvY2F0aW9uICsgaSAqIDEwKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICBmb3IobGV0IGk9MDsgaSA8IHRoaXMuc2hpcHNbc2hpcE5hbWVdO2krKyl7XG4gICAgICAgICAgICAgICAgbG9jYXRpb25BcnJheS5wdXNoKGxvY2F0aW9uICsgaSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYXRpb25BcnJheVxuICAgIH1cblxuICAgIGlzVmFsaWRQbGFjZW1lbnQgKGxvY2F0aW9uQXJyYXkpe1xuICAgICAgICBcbiAgICAgICAgY29uc3Qgd2FsbCA9IFs5LDE5LDI5LDM5LDQ5LDU5LDY5LDc5LDg5XVxuXG4gICAgICAgIGlmIChsb2NhdGlvbkFycmF5Lmxlbmd0aCA8PTApe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYobG9jYXRpb25BcnJheS5zb21lKChsb2MpID0+ICF0aGlzLmJvYXJkW2xvY10pKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NhdGlvbkFycmF5LnNvbWUoKGxvYyk9PnRoaXMuYm9hcmRbbG9jXS5oYXNTaGlwKSl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB3YWxsLnNvbWUoKG51bSk9PntcbiAgICAgICAgICAgICAgICByZXR1cm4gW251bSwgbnVtKzFdLmV2ZXJ5KChjb21ibyk9PmxvY2F0aW9uQXJyYXkuaW5jbHVkZXMoY29tYm8pKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKSAgIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgY29tcHV0ZXJTaGlwUGxhY2VtZW50KCl7XG4gICAgICAgIGxldCBheGlzID0gWyd4JywneSddXG5cbiAgICAgICAgbGV0IHNoaXBOYW1lcyA9IE9iamVjdC5rZXlzKHRoaXMuc2hpcHMpXG5cbiAgICAgICAgc2hpcE5hbWVzLmZvckVhY2goc2hpcE5hbWUgPT57XG4gICAgICAgICAgICBsZXQgbG9jYXRpb25BcnJheSA9IFtdXG4gICAgICAgICAgICBsZXQgcmFuZG9tTG9jID0nJ1xuICAgICAgICAgICAgbGV0IHJhbmRvbUF4aXMgPScnXG5cbiAgICAgICAgICAgIHdoaWxlICghdGhpcy5pc1ZhbGlkUGxhY2VtZW50KGxvY2F0aW9uQXJyYXkpKXtcbiAgICAgICAgICAgICAgICByYW5kb21Mb2MgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqOTkpXG4gICAgICAgICAgICAgICAgcmFuZG9tQXhpcyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoyKVxuICAgICAgICAgICAgICAgIGxvY2F0aW9uQXJyYXkgPSB0aGlzLmNyZWF0ZUxvY2F0aW9uQXJyYXkoXG4gICAgICAgICAgICAgICAgICAgIHJhbmRvbUxvYywgXG4gICAgICAgICAgICAgICAgICAgIHNoaXBOYW1lLCBcbiAgICAgICAgICAgICAgICAgICAgYXhpc1tyYW5kb21BeGlzXVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucGxhY2VTaGlwKHJhbmRvbUxvYywgc2hpcE5hbWUsIGF4aXNbcmFuZG9tQXhpc10pXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5leHBvcnQge0dhbWVib2FyZH0iLCJpbXBvcnQge0dhbWVib2FyZH0gZnJvbSAnLi9nYW1lYm9hcmQnXG5cbmNsYXNzIFBsYXllciB7XG4gICAgY29uc3RydWN0b3IgKG5hbWUpe1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgICAgIHRoaXMuZ2FtZWJvYXJkID0gbmV3IEdhbWVib2FyZFxuICAgIH1cblxuICAgIHR1cm4gKGxvY2F0aW9uLCBnYW1lYm9hcmQpe1xuICAgICAgICBpZiAoZ2FtZWJvYXJkLmJvYXJkW2xvY2F0aW9uXS5pc0hpdCAhPT0gdHJ1ZSl7XG4gICAgICAgICAgICBnYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhsb2NhdGlvbilcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7UGxheWVyfSIsImltcG9ydCB7c2hpcFR5cGVzfSBmcm9tICcuLi9hcHAvc2hpcFR5cGVzJ1xuXG5jbGFzcyBET01jb250cm9sbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yICgpe1xuICAgICAgICB0aGlzLnNoaXBOYW1lcyA9IE9iamVjdC5rZXlzKHNoaXBUeXBlcylcbiAgICB9XG5cbiAgICBydW5ET00gKHBsYXllcjEsIHBsYXllcjIpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhcnQnKVxuXG4gICAgICAgIHN0YXJ0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT57XG4gICAgICAgICAgICB0aGlzLmNsZWFyR2FtZUJveCgpXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUdhbWVib2FyZChwbGF5ZXIxKVxuICAgICAgICAgICAgdGhpcy5jcmVhdGVQbGF5ZXJQbGFjZW1lbnRVSShwbGF5ZXIxKVxuICAgICAgICB9KVxuICAgIH1cbiAgICBcbiAgICBjbGVhckdhbWVCb3goKXtcbiAgICAgICAgY29uc3QgZ2FtZUJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lLWJveCcpXG4gICAgICAgIHdoaWxlKGdhbWVCb3guaGFzQ2hpbGROb2RlcygpKXtcbiAgICAgICAgICAgIGdhbWVCb3gucmVtb3ZlQ2hpbGQoZ2FtZUJveC5sYXN0Q2hpbGQpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVHYW1lYm9hcmQocGxheWVyKXtcbiAgICAgICAgY29uc3QgZ2FtZUJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lLWJveCcpXG4gICAgICAgIGNvbnN0IGdhbWVib2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cbiAgICAgICAgZ2FtZUJveC5hcHBlbmRDaGlsZChnYW1lYm9hcmQpXG4gICAgICAgIGdhbWVib2FyZC5jbGFzc05hbWUgPSAnZ2FtZWJvYXJkJ1xuXG4gICAgICAgIGdhbWVib2FyZC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1ncmlkLXJvd3MnLCAxMClcbiAgICAgICAgZ2FtZWJvYXJkLnN0eWxlLnNldFByb3BlcnR5KCctLWdyaWQtY29scycsIDEwKVxuICAgICAgICBwbGF5ZXIuZ2FtZWJvYXJkLmJvYXJkLmZvckVhY2goKGJveCxpKSA9PiB7XG4gICAgICAgICAgICBsZXQgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgICAgICAgIGRpdi5kYXRhc2V0LmluZGV4ID0gaVxuICAgICAgICAgICAgZ2FtZWJvYXJkLmFwcGVuZENoaWxkKGRpdikuY2xhc3NMaXN0LmFkZCgnYm94JywgJ2VtcHR5JywgYCR7cGxheWVyLm5hbWV9YClcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcGxheWVyVHVybihhdHRhY2tpbmdQbGF5ZXIsIHJlY2lldmluZ1BsYXllcil7XG4gICAgICAgIGNvbnN0IGJveGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgLiR7cmVjaWV2aW5nUGxheWVyLm5hbWV9YClcbiAgICAgICAgYm94ZXMuZm9yRWFjaCgoYm94LCBpKSA9PiB7XG4gICAgICAgICAgICBib3guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgICAgICAgICAgICAgIGF0dGFja2luZ1BsYXllci50dXJuKGksIHJlY2lldmluZ1BsYXllci5nYW1lYm9hcmQpXG4gICAgICAgICAgICAgICAgYm94LmNsYXNzTGlzdC5yZW1vdmUoJ2VtcHR5JylcbiAgICAgICAgICAgICAgICBpZiAocmVjaWV2aW5nUGxheWVyLmdhbWVib2FyZC5ib2FyZFtpXS5oYXNTaGlwICE9PSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgYm94LmNsYXNzTGlzdC5hZGQoJ2hpdCcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGJveC5jbGFzc0xpc3QuYWRkKCdzaGlwLWhpdCcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjcmVhdGVQbGF5ZXJQbGFjZW1lbnRVSShwbGF5ZXIpe1xuICAgICAgICB0aGlzLmNyZWF0ZVBsYXllcklucHV0RE9NRWxlbWVudHMoKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgYm94ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGxheWVyJylcbiAgICAgICAgY29uc3QgcGxheWVySW5wdXREZXNjcmlwdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGF5ZXItaW5wdXQtZGVzY3JpcHRpb24nKVxuICAgICAgICBjb25zdCBheGlzQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5heGlzLWJ1dHRvbicpXG5cbiAgICAgICAgbGV0IGkgPTBcblxuICAgICAgICBheGlzQnV0dG9ucy5mb3JFYWNoKGJ1dHRvbj0+e1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZUFjdGl2ZUF4aXMoKVxuICAgICAgICAgICAgfSl9XG4gICAgICAgIClcblxuICAgICAgICBib3hlcy5mb3JFYWNoKGJveCA9PntcbiAgICAgICAgICAgIGlmKGk+NSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGJveC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG4gICAgICAgICAgICAgICAgICAgIGxldCBheGlzID0gdGhpcy5nZXRBeGlzKClcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxvY2F0aW9uQXJyYXkgPSBwbGF5ZXIuZ2FtZWJvYXJkLmNyZWF0ZUxvY2F0aW9uQXJyYXkocGFyc2VJbnQoYm94LmRhdGFzZXQuaW5kZXgpLCB0aGlzLnNoaXBOYW1lc1tpXSwgYXhpcylcbiAgICAgICAgICAgICAgICAgICAgaWYoIXBsYXllci5nYW1lYm9hcmQuaXNWYWxpZFBsYWNlbWVudChsb2NhdGlvbkFycmF5KSl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLmdhbWVib2FyZC5wbGFjZVNoaXAocGFyc2VJbnQoYm94LmRhdGFzZXQuaW5kZXgpLCB0aGlzLnNoaXBOYW1lc1tpXSwgYXhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uQXJyYXkuZm9yRWFjaChsb2MgPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94ZXNbbG9jXS5jbGFzc0xpc3QuYWRkKCdoYXMtc2hpcCcpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgaSsrXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaTw1KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJJbnB1dERlc2NyaXB0aW9uLmlubmVyVGV4dCA9IGBQbGVhc2UgcGxhY2UgeW91cjogJHt0aGlzLnNoaXBOYW1lc1tpXX1gXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUGxheUdhbWVCdXR0b24oKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjcmVhdGVQbGF5ZXJJbnB1dERPTUVsZW1lbnRzKCl7XG4gICAgICAgIGNvbnN0IGdhbWVCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1ib3gnKVxuICAgICAgICBjb25zdCBwbGF5ZXJJbnB1dENvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICBjb25zdCBwbGF5ZXJJbnB1dERlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgICAgY29uc3QgYXhpc0JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgIGNvbnN0IHhCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgICAgICBjb25zdCB5QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcblxuICAgICAgICBnYW1lQm94LmNsYXNzTmFtZSA9ICdwbGF5ZXItaW5wdXQnXG5cbiAgICAgICAgeEJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd4JywgJ2FjdGl2ZScsICdheGlzLWJ1dHRvbicpXG4gICAgICAgIHhCdXR0b24uaW5uZXJIVE1MID0neCdcbiAgICAgICAgeEJ1dHRvbi52YWx1ZSA9ICd4J1xuXG4gICAgICAgIHlCdXR0b24uY2xhc3NMaXN0LmFkZCgneScsICdpbmFjdGl2ZScsICdheGlzLWJ1dHRvbicpXG4gICAgICAgIHlCdXR0b24uaW5uZXJIVE1MID0neSdcbiAgICAgICAgeUJ1dHRvbi52YWx1ZSA9ICd5J1xuXG4gICAgICAgIGF4aXNCb3guY2xhc3NOYW1lID0gJ2F4aXMtYm94J1xuICAgICAgICBheGlzQm94LmFwcGVuZENoaWxkKHhCdXR0b24pXG4gICAgICAgIGF4aXNCb3guYXBwZW5kQ2hpbGQoeUJ1dHRvbilcblxuICAgICAgICBwbGF5ZXJJbnB1dERlc2NyaXB0aW9uLmNsYXNzTmFtZSA9ICdwbGF5ZXItaW5wdXQtZGVzY3JpcHRpb24nXG4gICAgICAgIHBsYXllcklucHV0RGVzY3JpcHRpb24uaW5uZXJUZXh0ID0gJ1BsZWFzZSBwbGFjZSB5b3VyOiBDYXJyaWVyJ1xuICAgICAgICBcbiAgICAgICAgcGxheWVySW5wdXRDb250ZW50LmlkID0gJ3BsYXllci1pbnB1dC1jb250ZW50J1xuICAgICAgICBwbGF5ZXJJbnB1dENvbnRlbnQuYXBwZW5kQ2hpbGQoYXhpc0JveClcbiAgICAgICAgcGxheWVySW5wdXRDb250ZW50LmFwcGVuZENoaWxkKHBsYXllcklucHV0RGVzY3JpcHRpb24pXG5cbiAgICAgICAgZ2FtZUJveC5hcHBlbmRDaGlsZChwbGF5ZXJJbnB1dENvbnRlbnQpXG4gICAgfVxuXG4gICAgY3JlYXRlUGxheUdhbWVCdXR0b24oKXtcbiAgICAgICAgY29uc3QgcGxheWVySW5wdXREZXNjcmlwdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGF5ZXItaW5wdXQtZGVzY3JpcHRpb24nKVxuICAgICAgICBjb25zdCBwbGF5QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcbiAgICAgICAgY29uc3QgYXhpc0JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5heGlzLWJveCcpXG5cbiAgICAgICAgd2hpbGUoYXhpc0JveC5oYXNDaGlsZE5vZGVzKCkpe1xuICAgICAgICAgICAgYXhpc0JveC5yZW1vdmVDaGlsZChheGlzQm94Lmxhc3RDaGlsZClcbiAgICAgICAgICAgIGF4aXNCb3guY2xhc3NMaXN0LnJlbW92ZSgnYXhpcy1ib3gnKVxuICAgICAgICB9XG5cbiAgICAgICAgcGxheUJ1dHRvbi5pbm5lckhUTUwgPSAnUGxheSdcbiAgICAgICAgcGxheUJ1dHRvbi5pZCA9ICdwbGF5J1xuICAgICAgICBwbGF5ZXJJbnB1dERlc2NyaXB0aW9uLmlubmVyVGV4dCA9ICcnXG4gICAgICAgIHBsYXllcklucHV0RGVzY3JpcHRpb24uYXBwZW5kQ2hpbGQocGxheUJ1dHRvbilcbiAgICB9XG5cbiAgICBjaGFuZ2VBY3RpdmVBeGlzKCl7XG4gICAgICAgIGxldCBhY3RpdmVBeGlzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFjdGl2ZScpXG4gICAgICAgIGxldCBpbmFjdGl2ZUF4aXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5hY3RpdmUnKVxuICAgIFxuICAgICAgICBpbmFjdGl2ZUF4aXMuY2xhc3NMaXN0LnJlbW92ZSgnaW5hY3RpdmUnKVxuICAgICAgICBpbmFjdGl2ZUF4aXMuY2xhc3NMaXN0LmFkZCgnYWNpdHZlJylcblxuICAgICAgICBhY3RpdmVBeGlzLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXG4gICAgICAgIGFjdGl2ZUF4aXMuY2xhc3NMaXN0LmFkZCgnaW5hY3RpdmUnKVxuICAgIH1cblxuICAgIGdldEF4aXMoKXtcbiAgICAgICAgbGV0IGFjdGl2ZUF4aXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWN0aXZlJykudmFsdWVcblxuICAgICAgICByZXR1cm4gYWN0aXZlQXhpc1xuICAgIH1cbn1cblxuZXhwb3J0IHtET01jb250cm9sbGVyfSIsImltcG9ydCAnLi9zdHlsZS5jc3MnXG5pbXBvcnQge1BsYXllcn0gZnJvbSAnLi4vc3JjL2FwcC9wbGF5ZXInXG5pbXBvcnQge0RPTWNvbnRyb2xsZXJ9IGZyb20gJy4vRE9NL0RPTXNjcmlwdHMnXG5cbmNsYXNzIEJhdHRsZXNoaXAge1xuXG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5wbGF5ZXIxID0gbmV3IFBsYXllcigncGxheWVyJylcbiAgICAgICAgdGhpcy5wbGF5ZXIyID0gbmV3IFBsYXllcignY29tcHV0ZXInKVxuICAgICAgICB0aGlzLkRPTWNvbnRyb2xsZXIgPSBuZXcgRE9NY29udHJvbGxlcih0aGlzLnBsYXllcjEsIHRoaXMucGxheWVyMilcbiAgICB9XG5cbiAgICBydW4oKXtcbiAgICAgICAgdGhpcy5ET01jb250cm9sbGVyLnJ1bkRPTSh0aGlzLnBsYXllcjEsIHRoaXMucGxheWVyMilcbiAgICAgICAgdGhpcy5ET01jb250cm9sbGVyLnBsYXllclR1cm4odGhpcy5wbGF5ZXIxLCB0aGlzLnBsYXllcjIpXG4gICAgfVxufVxuXG5sZXQgZ2FtZSA9IG5ldyBCYXR0bGVzaGlwXG5nYW1lLnJ1bigpIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJTaGlwIiwiY29uc3RydWN0b3IiLCJuYW1lIiwic2l6ZSIsInBvc2l0aW9uIiwiYmVlbkhpdCIsImhpdCIsIm51bSIsImluY2x1ZGVzIiwiaXNTdW5rIiwiZXZlcnkiLCJzaGlwVHlwZXMiLCJHYW1lYm9hcmQiLCJib2FyZCIsInNoaXBzIiwiZmxlZXQiLCJidWlsZCIsImhhc1NoaXAiLCJpc0hpdCIsInJlY2VpdmVBdHRhY2siLCJsb2NhdGlvbiIsImF0dGFja1NoaXAiLCJmb3JFYWNoIiwiYm9hdCIsInNsaWNlIiwiY29uc29sZSIsImxvZyIsInBsYWNlU2hpcCIsInNoaXBOYW1lIiwiYXhpcyIsInNoaXAiLCJsb2NhdGlvbkFycmF5IiwiY3JlYXRlTG9jYXRpb25BcnJheSIsImlzVmFsaWRQbGFjZW1lbnQiLCJsb2MiLCJzb21lIiwiY29tYm8iLCJjb21wdXRlclNoaXBQbGFjZW1lbnQiLCJrZXlzIiwicmFuZG9tTG9jIiwicmFuZG9tQXhpcyIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIlBsYXllciIsImdhbWVib2FyZCIsInR1cm4iLCJET01jb250cm9sbGVyIiwic2hpcE5hbWVzIiwicnVuRE9NIiwicGxheWVyMSIsInBsYXllcjIiLCJnZXRFbGVtZW50QnlJZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGVhckdhbWVCb3giLCJjcmVhdGVHYW1lYm9hcmQiLCJjcmVhdGVQbGF5ZXJQbGFjZW1lbnRVSSIsImdhbWVCb3giLCJoYXNDaGlsZE5vZGVzIiwibGFzdENoaWxkIiwicGxheWVyIiwiY2xhc3NOYW1lIiwic2V0UHJvcGVydHkiLCJib3giLCJkaXYiLCJkYXRhc2V0IiwiY2xhc3NMaXN0IiwiYWRkIiwicGxheWVyVHVybiIsImF0dGFja2luZ1BsYXllciIsInJlY2lldmluZ1BsYXllciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjcmVhdGVQbGF5ZXJJbnB1dERPTUVsZW1lbnRzIiwiYm94ZXMiLCJwbGF5ZXJJbnB1dERlc2NyaXB0aW9uIiwiYXhpc0J1dHRvbnMiLCJidXR0b24iLCJjaGFuZ2VBY3RpdmVBeGlzIiwiZ2V0QXhpcyIsInBhcnNlSW50IiwiaW5uZXJUZXh0IiwiY3JlYXRlUGxheUdhbWVCdXR0b24iLCJwbGF5ZXJJbnB1dENvbnRlbnQiLCJheGlzQm94IiwieEJ1dHRvbiIsInlCdXR0b24iLCJpbm5lckhUTUwiLCJ2YWx1ZSIsInBsYXlCdXR0b24iLCJhY3RpdmVBeGlzIiwiaW5hY3RpdmVBeGlzIiwicnVuIl0sInNvdXJjZVJvb3QiOiIifQ==