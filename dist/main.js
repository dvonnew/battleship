(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(537),r=t.n(a),i=t(645),o=t.n(i)()(r());o.push([e.id,'body, html{\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    font-family: BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", \n    "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", \n    "Helvetica Neue", "Helvetica", "Arial", sans-serif;\n}\n\n#layout{\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    background: linear-gradient(#acacac, #575757);\n}\n\n#header{\n    height: 10%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\np{\n    font-size: 40px;\n}\n\n#game-box{\n    height: 90%;\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n#player-input-content{\n    font-size: 24px;\n    height: 200px;\n    width: 200px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n}\n\n#start, #play{\n    height: 60px;\n    width: 150px;\n    border: 2px solid black;\n    border-radius: 5px;\n    font-size: 40px;\n    background: linear-gradient(#4762fa, #003172);\n\n}\n\n#start:hover, #play:hover{\n    color:white\n}\n\n.gameboard {\n    height: 400px;\n    width: 400px;\n    margin: 0;\n    padding: 0;\n    display: grid;\n    grid-template-rows: repeat(var(--grid-rows),1fr);\n    grid-template-columns: repeat(var(--grid-cols),1fr);\n    background-color: rgb(198, 228, 255);\n    border-color: black;\n    border-width: 5px;\n    border: black;\n    border-style: solid;\n}\n\n.box{\n    border: .5px solid grey;\n}\n\n.box:hover{\n    background-color: grey;\n}\n\n.has-ship{\n    background-color: rgb(196, 196, 196);\n}\n\n.hit{\n    background-color: rgb(179, 255, 179);\n}\n\n.ship-hit{\n    background-color: rgb(253, 171, 171);\n}\n\n.axis-box{\n    height: 25x;\n    width: 70px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n    border: black 1px solid;\n    border-radius: 5px;\n    background-color: black;\n}\n\n.player-input-description{\n    height: 150px;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.x, .y{\n    height: 25px;\n    width: 35px;\n    border: black solid 2px;\n    border-radius: 5px;\n    font-size: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.active{\n    background-color: white;\n    color: black\n}\n\n.inactive{\n    background-color: black;\n    color: white;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,WAAW;IACX,SAAS;IACT,UAAU;IACV;;sDAEkD;AACtD;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,SAAS;IACT,UAAU;IACV,6CAA6C;AACjD;;AAEA;IACI,WAAW;IACX,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,WAAW;IACX,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,aAAa;IACb,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,6BAA6B;AACjC;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,uBAAuB;IACvB,kBAAkB;IAClB,eAAe;IACf,6CAA6C;;AAEjD;;AAEA;IACI;AACJ;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,SAAS;IACT,UAAU;IACV,aAAa;IACb,gDAAgD;IAChD,mDAAmD;IACnD,oCAAoC;IACpC,mBAAmB;IACnB,iBAAiB;IACjB,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,WAAW;IACX,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,6BAA6B;IAC7B,mBAAmB;IACnB,uBAAuB;IACvB,kBAAkB;IAClB,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,uBAAuB;IACvB,kBAAkB;IAClB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,uBAAuB;IACvB;AACJ;;AAEA;IACI,uBAAuB;IACvB,YAAY;AAChB",sourcesContent:['body, html{\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    font-family: BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", \n    "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", \n    "Helvetica Neue", "Helvetica", "Arial", sans-serif;\n}\n\n#layout{\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    background: linear-gradient(#acacac, #575757);\n}\n\n#header{\n    height: 10%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\np{\n    font-size: 40px;\n}\n\n#game-box{\n    height: 90%;\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n#player-input-content{\n    font-size: 24px;\n    height: 200px;\n    width: 200px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n}\n\n#start, #play{\n    height: 60px;\n    width: 150px;\n    border: 2px solid black;\n    border-radius: 5px;\n    font-size: 40px;\n    background: linear-gradient(#4762fa, #003172);\n\n}\n\n#start:hover, #play:hover{\n    color:white\n}\n\n.gameboard {\n    height: 400px;\n    width: 400px;\n    margin: 0;\n    padding: 0;\n    display: grid;\n    grid-template-rows: repeat(var(--grid-rows),1fr);\n    grid-template-columns: repeat(var(--grid-cols),1fr);\n    background-color: rgb(198, 228, 255);\n    border-color: black;\n    border-width: 5px;\n    border: black;\n    border-style: solid;\n}\n\n.box{\n    border: .5px solid grey;\n}\n\n.box:hover{\n    background-color: grey;\n}\n\n.has-ship{\n    background-color: rgb(196, 196, 196);\n}\n\n.hit{\n    background-color: rgb(179, 255, 179);\n}\n\n.ship-hit{\n    background-color: rgb(253, 171, 171);\n}\n\n.axis-box{\n    height: 25x;\n    width: 70px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n    border: black 1px solid;\n    border-radius: 5px;\n    background-color: black;\n}\n\n.player-input-description{\n    height: 150px;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.x, .y{\n    height: 25px;\n    width: 35px;\n    border: black solid 2px;\n    border-radius: 5px;\n    font-size: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.active{\n    background-color: white;\n    color: black\n}\n\n.inactive{\n    background-color: black;\n    color: white;\n}'],sourceRoot:""}]);const s=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",a=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),a&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),a&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,a,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(a)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var l=0;l<e.length;l++){var A=[].concat(e[l]);a&&o[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),n.push(A))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(r," */"),o=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,a=0;a<n.length;a++)if(n[a].identifier===e){t=a;break}return t}function a(e,a){for(var i={},o=[],s=0;s<e.length;s++){var c=e[s],l=a.base?c[0]+a.base:c[0],A=i[l]||0,d="".concat(l," ").concat(A);i[l]=A+1;var p=t(d),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(h);else{var u=r(h,a);a.byIndex=s,n.splice(s,0,{identifier:d,updater:u,references:1})}o.push(d)}return o}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var i=a(e=e||[],r=r||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var s=t(i[o]);n[s].references--}for(var c=a(e,r),l=0;l<i.length;l++){var A=t(i[l]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}i=c}}},569:e=>{var n={};e.exports=function(e,t){var a=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,r&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(a,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(a){var r=n[a];if(void 0!==r)return r.exports;var i=n[a]={id:a,exports:{}};return e[a](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var a in n)t.o(n,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:n[a]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),a=t(795),r=t.n(a),i=t(569),o=t.n(i),s=t(565),c=t.n(s),l=t(216),A=t.n(l),d=t(589),p=t.n(d),h=t(426),u={};u.styleTagTransform=p(),u.setAttributes=c(),u.insert=o().bind(null,"head"),u.domAPI=r(),u.insertStyleElement=A(),n()(h.Z,u),h.Z&&h.Z.locals&&h.Z.locals;class m{constructor(e,n){this.name=e,this.size=n,this.position=[],this.beenHit=[]}hit(e){this.beenHit.includes(e)||this.beenHit.push(e)}isSunk(){return this.position.every((e=>this.beenHit.includes(e)))}}let b={Carrier:5,Battleship:4,Destroyer:3,Submarine:3,"Patrol Boat":2};class g{constructor(){this.board=[],this.ships=b,this.fleet=[],this.build()}build(){for(let e=0;e<100;e++)this.board.push({hasShip:!1,isHit:!1})}receiveAttack(e){this.board[e].isHit=!0,!0===this.board[e].hasShip&&this.attackShip(e)}attackShip(e){this.fleet.forEach(((n,t)=>{n.position.includes(e)&&(n.hit(e),n.isSunk()&&(this.fleet.splice(t,1),console.log(`${n.name} sank`)))}))}placeShip(e,n,t){let a=new m(n,this.ships[n]),r=this.createLocationArray(e,n,t);this.isValidPlacement(r)&&(r.forEach((e=>{this.board[e].hasShip=!0,a.position.push(e)})),this.fleet.push(a))}createLocationArray(e,n,t){const a=[];if("x"!==t)for(let t=0;t<this.ships[n];t++)a.push(e+10*t);else for(let t=0;t<this.ships[n];t++)a.push(e+t);return a}isValidPlacement(e){return!(e.length<=0||e.some((e=>!this.board[e]))||e.some((e=>this.board[e].hasShip))||[9,19,29,39,49,59,69,79,89].some((n=>[n,n+1].every((n=>e.includes(n))))))}computerShipPlacement(){let e=["x","y"];Object.keys(this.ships).forEach((n=>{let t=[],a="",r="";for(;!this.isValidPlacement(t);)a=Math.floor(99*Math.random()),r=Math.floor(2*Math.random()),t=this.createLocationArray(a,n,e[r]);this.placeShip(a,n,e[r])}))}computerTurn(e){const n=document.querySelectorAll(".player");let t=Math.floor(99*Math.random());e.gameboard.receiveAttack(t),n[t].classList.remove("empty"),n[t].classList.add("hit"),!0===e.gameboard.board[t].hasShip&&(n[t].classList.add("ship-hit"),n[t].classList.remove("has-ship")),this.winCheck(e.gameboard)}winCheck(e){e.fleet.length>0||console.log("Computer Wins!")}}class y{constructor(e){this.name=e,this.gameboard=new g}turn(e,n){!0!==n.board[e].isHit&&(n.receiveAttack(e),this.winCheck(n),console.log(n.fleet.length))}winCheck(e){e.fleet.length>0||console.log(`${this.name} Wins!`)}}class f{constructor(){this.shipNames=Object.keys(b)}startDOM(e,n){document.getElementById("start").addEventListener("click",(()=>{this.clearGameBox(),this.createGameboard(e),this.createPlayerPlacementUI(e,n)}))}startGame(e,n){n.gameboard.computerShipPlacement(),this.clearGameBox(),this.createGameboard(e),this.createGameboard(n)}clearGameBox(){const e=document.getElementById("game-box");for(;e.hasChildNodes();)e.removeChild(e.lastChild)}createGameboard(e){const n=document.getElementById("game-box"),t=document.createElement("div");n.appendChild(t),t.className="gameboard",t.style.setProperty("--grid-rows",10),t.style.setProperty("--grid-cols",10),e.gameboard.board.forEach(((n,a)=>{let r=document.createElement("div");r.dataset.index=a,t.appendChild(r).classList.add("box","empty",`${e.name}`),"player"===e.name&&n.hasShip&&r.classList.add("has-ship")}))}playerTurn(e,n){"computer"===e.name?e.gameboard.computerTurn(n):document.querySelectorAll(`.${n.name}`).forEach(((t,a)=>{t.addEventListener("click",(()=>{e.turn(a,n.gameboard),t.classList.remove("empty"),console.log("shot"),!0!==n.gameboard.board[a].hasShip?t.classList.add("hit"):t.classList.add("ship-hit")}))}))}createPlayerPlacementUI(e,n){this.createPlayerInputDOMElements();const t=document.querySelectorAll(".player"),a=document.querySelector(".player-input-description"),r=document.querySelectorAll(".axis-button");let i=0;r.forEach((e=>{e.addEventListener("click",(()=>{this.changeActiveAxis(e)}))})),t.forEach((r=>{i>5||r.addEventListener("click",(()=>{let o=this.getAxis(),s=e.gameboard.createLocationArray(parseInt(r.dataset.index),this.shipNames[i],o);e.gameboard.isValidPlacement(s)&&(e.gameboard.placeShip(parseInt(r.dataset.index),this.shipNames[i],o),s.forEach((e=>{t[e].classList.add("has-ship")})),i++,i<5?a.innerText=`Please place your: ${this.shipNames[i]}`:(this.createPlayGameButton(),document.getElementById("play").addEventListener("click",(()=>{this.startGame(e,n)}))))}))}))}createPlayerInputDOMElements(){const e=document.getElementById("game-box"),n=document.createElement("div"),t=document.createElement("div"),a=document.createElement("div"),r=document.createElement("button"),i=document.createElement("button");e.className="player-input",r.classList.add("x","active","axis-button"),r.innerHTML="x",r.value="x",i.classList.add("y","inactive","axis-button"),i.innerHTML="y",i.value="y",a.className="axis-box",a.appendChild(r),a.appendChild(i),t.className="player-input-description",t.innerText="Please place your: Carrier",n.id="player-input-content",n.appendChild(a),n.appendChild(t),e.appendChild(n)}createPlayGameButton(){const e=document.querySelector(".player-input-description"),n=document.createElement("button"),t=document.querySelector(".axis-box");for(;t.hasChildNodes();)t.removeChild(t.lastChild),t.classList.remove("axis-box");n.innerHTML="Play",n.id="play",e.innerText="",e.appendChild(n)}changeActiveAxis(e){if(e.classList.contains("inactive"))if(e.classList.add("active"),e.classList.remove("inactive"),"x"==e.value){let e=document.querySelector(".y");e.classList.add("inactive"),e.classList.remove("active")}else{let e=document.querySelector(".x");e.classList.remove("active"),e.classList.add("inactive")}}getAxis(){return document.querySelector(".active").value}}(new class{constructor(){this.player1=new y("player"),this.player2=new y("computer"),this.DOMcontroller=new f(this.player1,this.player2)}run(){this.DOMcontroller.startDOM(this.player1,this.player2)}}).run()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxVQUdJLE9BRmlCakksU0FBU0MsY0FBYyxXQUFXeUksUUNqTGhELElBYlgsTUFFSXpGLGNBQ0luSCxLQUFLMEssUUFBVSxJQUFJTCxFQUFPLFVBQzFCckssS0FBSzJLLFFBQVUsSUFBSU4sRUFBTyxZQUMxQnJLLEtBQUt1SyxjQUFnQixJQUFJQSxFQUFjdkssS0FBSzBLLFFBQVMxSyxLQUFLMkssU0FHOURzQyxNQUNJak4sS0FBS3VLLGNBQWNFLFNBQVN6SyxLQUFLMEssUUFBUzFLLEtBQUsySyxZQUtsRHNDLE8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9hcHAvc2hpcHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9hcHAvc2hpcFR5cGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvYXBwL2dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2FwcC9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9ET00vRE9Nc2NyaXB0cy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSwgaHRtbHtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBmb250LWZhbWlseTogQmxpbmtNYWNTeXN0ZW1Gb250LCAtYXBwbGUtc3lzdGVtLCBcXFwiU2Vnb2UgVUlcXFwiLCBcXFwiUm9ib3RvXFxcIiwgXFxuICAgIFxcXCJPeHlnZW5cXFwiLCBcXFwiVWJ1bnR1XFxcIiwgXFxcIkNhbnRhcmVsbFxcXCIsIFxcXCJGaXJhIFNhbnNcXFwiLCBcXFwiRHJvaWQgU2Fuc1xcXCIsIFxcbiAgICBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBcXFwiSGVsdmV0aWNhXFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtcXG59XFxuXFxuI2xheW91dHtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoI2FjYWNhYywgIzU3NTc1Nyk7XFxufVxcblxcbiNoZWFkZXJ7XFxuICAgIGhlaWdodDogMTAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbnB7XFxuICAgIGZvbnQtc2l6ZTogNDBweDtcXG59XFxuXFxuI2dhbWUtYm94e1xcbiAgICBoZWlnaHQ6IDkwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4jcGxheWVyLWlucHV0LWNvbnRlbnR7XFxuICAgIGZvbnQtc2l6ZTogMjRweDtcXG4gICAgaGVpZ2h0OiAyMDBweDtcXG4gICAgd2lkdGg6IDIwMHB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG59XFxuXFxuI3N0YXJ0LCAjcGxheXtcXG4gICAgaGVpZ2h0OiA2MHB4O1xcbiAgICB3aWR0aDogMTUwcHg7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrO1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIGZvbnQtc2l6ZTogNDBweDtcXG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KCM0NzYyZmEsICMwMDMxNzIpO1xcblxcbn1cXG5cXG4jc3RhcnQ6aG92ZXIsICNwbGF5OmhvdmVye1xcbiAgICBjb2xvcjp3aGl0ZVxcbn1cXG5cXG4uZ2FtZWJvYXJkIHtcXG4gICAgaGVpZ2h0OiA0MDBweDtcXG4gICAgd2lkdGg6IDQwMHB4O1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KHZhcigtLWdyaWQtcm93cyksMWZyKTtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQodmFyKC0tZ3JpZC1jb2xzKSwxZnIpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTk4LCAyMjgsIDI1NSk7XFxuICAgIGJvcmRlci1jb2xvcjogYmxhY2s7XFxuICAgIGJvcmRlci13aWR0aDogNXB4O1xcbiAgICBib3JkZXI6IGJsYWNrO1xcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbn1cXG5cXG4uYm94e1xcbiAgICBib3JkZXI6IC41cHggc29saWQgZ3JleTtcXG59XFxuXFxuLmJveDpob3ZlcntcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JleTtcXG59XFxuXFxuLmhhcy1zaGlwe1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTk2LCAxOTYsIDE5Nik7XFxufVxcblxcbi5oaXR7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNzksIDI1NSwgMTc5KTtcXG59XFxuXFxuLnNoaXAtaGl0e1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjUzLCAxNzEsIDE3MSk7XFxufVxcblxcbi5heGlzLWJveHtcXG4gICAgaGVpZ2h0OiAyNXg7XFxuICAgIHdpZHRoOiA3MHB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgYm9yZGVyOiBibGFjayAxcHggc29saWQ7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxufVxcblxcbi5wbGF5ZXItaW5wdXQtZGVzY3JpcHRpb257XFxuICAgIGhlaWdodDogMTUwcHg7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLngsIC55e1xcbiAgICBoZWlnaHQ6IDI1cHg7XFxuICAgIHdpZHRoOiAzNXB4O1xcbiAgICBib3JkZXI6IGJsYWNrIHNvbGlkIDJweDtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBmb250LXNpemU6IDIwcHg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uYWN0aXZle1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgY29sb3I6IGJsYWNrXFxufVxcblxcbi5pbmFjdGl2ZXtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLFlBQVk7SUFDWixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVjs7c0RBRWtEO0FBQ3REOztBQUVBO0lBQ0ksWUFBWTtJQUNaLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLDZDQUE2QztBQUNqRDs7QUFFQTtJQUNJLFdBQVc7SUFDWCxXQUFXO0lBQ1gsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksV0FBVztJQUNYLFdBQVc7SUFDWCxhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLDZCQUE2QjtJQUM3QixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsYUFBYTtJQUNiLFlBQVk7SUFDWixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLG1CQUFtQjtJQUNuQiw2QkFBNkI7QUFDakM7O0FBRUE7SUFDSSxZQUFZO0lBQ1osWUFBWTtJQUNaLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLDZDQUE2Qzs7QUFFakQ7O0FBRUE7SUFDSTtBQUNKOztBQUVBO0lBQ0ksYUFBYTtJQUNiLFlBQVk7SUFDWixTQUFTO0lBQ1QsVUFBVTtJQUNWLGFBQWE7SUFDYixnREFBZ0Q7SUFDaEQsbURBQW1EO0lBQ25ELG9DQUFvQztJQUNwQyxtQkFBbUI7SUFDbkIsaUJBQWlCO0lBQ2pCLGFBQWE7SUFDYixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSx1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxvQ0FBb0M7QUFDeEM7O0FBRUE7SUFDSSxvQ0FBb0M7QUFDeEM7O0FBRUE7SUFDSSxvQ0FBb0M7QUFDeEM7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsV0FBVztJQUNYLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsNkJBQTZCO0lBQzdCLG1CQUFtQjtJQUNuQix1QkFBdUI7SUFDdkIsa0JBQWtCO0lBQ2xCLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixXQUFXO0lBQ1gsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osV0FBVztJQUNYLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksdUJBQXVCO0lBQ3ZCO0FBQ0o7O0FBRUE7SUFDSSx1QkFBdUI7SUFDdkIsWUFBWTtBQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJib2R5LCBodG1se1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGZvbnQtZmFtaWx5OiBCbGlua01hY1N5c3RlbUZvbnQsIC1hcHBsZS1zeXN0ZW0sIFxcXCJTZWdvZSBVSVxcXCIsIFxcXCJSb2JvdG9cXFwiLCBcXG4gICAgXFxcIk94eWdlblxcXCIsIFxcXCJVYnVudHVcXFwiLCBcXFwiQ2FudGFyZWxsXFxcIiwgXFxcIkZpcmEgU2Fuc1xcXCIsIFxcXCJEcm9pZCBTYW5zXFxcIiwgXFxuICAgIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIFxcXCJIZWx2ZXRpY2FcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO1xcbn1cXG5cXG4jbGF5b3V0e1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgjYWNhY2FjLCAjNTc1NzU3KTtcXG59XFxuXFxuI2hlYWRlcntcXG4gICAgaGVpZ2h0OiAxMCU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxucHtcXG4gICAgZm9udC1zaXplOiA0MHB4O1xcbn1cXG5cXG4jZ2FtZS1ib3h7XFxuICAgIGhlaWdodDogOTAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbiNwbGF5ZXItaW5wdXQtY29udGVudHtcXG4gICAgZm9udC1zaXplOiAyNHB4O1xcbiAgICBoZWlnaHQ6IDIwMHB4O1xcbiAgICB3aWR0aDogMjAwcHg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xcbn1cXG5cXG4jc3RhcnQsICNwbGF5e1xcbiAgICBoZWlnaHQ6IDYwcHg7XFxuICAgIHdpZHRoOiAxNTBweDtcXG4gICAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgZm9udC1zaXplOiA0MHB4O1xcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoIzQ3NjJmYSwgIzAwMzE3Mik7XFxuXFxufVxcblxcbiNzdGFydDpob3ZlciwgI3BsYXk6aG92ZXJ7XFxuICAgIGNvbG9yOndoaXRlXFxufVxcblxcbi5nYW1lYm9hcmQge1xcbiAgICBoZWlnaHQ6IDQwMHB4O1xcbiAgICB3aWR0aDogNDAwcHg7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQodmFyKC0tZ3JpZC1yb3dzKSwxZnIpO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCh2YXIoLS1ncmlkLWNvbHMpLDFmcik7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxOTgsIDIyOCwgMjU1KTtcXG4gICAgYm9yZGVyLWNvbG9yOiBibGFjaztcXG4gICAgYm9yZGVyLXdpZHRoOiA1cHg7XFxuICAgIGJvcmRlcjogYmxhY2s7XFxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxufVxcblxcbi5ib3h7XFxuICAgIGJvcmRlcjogLjVweCBzb2xpZCBncmV5O1xcbn1cXG5cXG4uYm94OmhvdmVye1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmV5O1xcbn1cXG5cXG4uaGFzLXNoaXB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxOTYsIDE5NiwgMTk2KTtcXG59XFxuXFxuLmhpdHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE3OSwgMjU1LCAxNzkpO1xcbn1cXG5cXG4uc2hpcC1oaXR7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTMsIDE3MSwgMTcxKTtcXG59XFxuXFxuLmF4aXMtYm94e1xcbiAgICBoZWlnaHQ6IDI1eDtcXG4gICAgd2lkdGg6IDcwcHg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBib3JkZXI6IGJsYWNrIDFweCBzb2xpZDtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG59XFxuXFxuLnBsYXllci1pbnB1dC1kZXNjcmlwdGlvbntcXG4gICAgaGVpZ2h0OiAxNTBweDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4ueCwgLnl7XFxuICAgIGhlaWdodDogMjVweDtcXG4gICAgd2lkdGg6IDM1cHg7XFxuICAgIGJvcmRlcjogYmxhY2sgc29saWQgMnB4O1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5hY3RpdmV7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICBjb2xvcjogYmxhY2tcXG59XFxuXFxuLmluYWN0aXZle1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG4gICAgY29sb3I6IHdoaXRlO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJjbGFzcyBTaGlwIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBzaXplKXtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZVxuICAgICAgICB0aGlzLnNpemUgPSBzaXplXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBbXVxuICAgICAgICB0aGlzLmJlZW5IaXQgPSBbXVxuICAgIH1cblxuICAgIGhpdChudW0pIHtcbiAgICAgICAgaWYgKHRoaXMuYmVlbkhpdC5pbmNsdWRlcyhudW0pKXtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICB0aGlzLmJlZW5IaXQucHVzaChudW0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc1N1bmsgKCl7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLmV2ZXJ5KG51bSA9PntcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJlZW5IaXQuaW5jbHVkZXMobnVtKVxuICAgICAgICB9KVxuICAgIH1cbn1cblxuZXhwb3J0IHtTaGlwfSIsImltcG9ydCB7U2hpcH0gZnJvbSAnLi9zaGlwcydcblxubGV0IHNoaXBUeXBlcyA9IHsnQ2Fycmllcic6IDUsICdCYXR0bGVzaGlwJzogNCwgJ0Rlc3Ryb3llcic6IDMsICdTdWJtYXJpbmUnOiAzLCAnUGF0cm9sIEJvYXQnOiAyfVxuXG5leHBvcnQge3NoaXBUeXBlc30iLCJpbXBvcnQge1NoaXB9IGZyb20gJy4vc2hpcHMnXG5pbXBvcnQge3NoaXBUeXBlc30gZnJvbSAnLi9zaGlwVHlwZXMnXG5cbmNsYXNzIEdhbWVib2FyZCB7XG5cbiAgICBjb25zdHJ1Y3RvciAoKXtcbiAgICAgICAgdGhpcy5ib2FyZCA9IFtdXG4gICAgICAgIHRoaXMuc2hpcHMgPSBzaGlwVHlwZXNcbiAgICAgICAgdGhpcy5mbGVldCA9IFtdXG4gICAgICAgIHRoaXMuYnVpbGQoKVxuICAgIH1cblxuICAgIGJ1aWxkKCl7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaTwxMDA7IGkrKyl7XG4gICAgICAgICAgICB0aGlzLmJvYXJkLnB1c2goe2hhc1NoaXA6IGZhbHNlLCBpc0hpdDogZmFsc2V9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVjZWl2ZUF0dGFjayhsb2NhdGlvbil7XG4gICAgICAgIHRoaXMuYm9hcmRbbG9jYXRpb25dLmlzSGl0ID0gdHJ1ZVxuICAgICAgICBpZih0aGlzLmJvYXJkW2xvY2F0aW9uXS5oYXNTaGlwICE9PSB0cnVlKXtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICB0aGlzLmF0dGFja1NoaXAobG9jYXRpb24pXG4gICAgICAgIH0gXG4gICAgfVxuXG4gICAgYXR0YWNrU2hpcChsb2NhdGlvbil7XG4gICAgICAgIHRoaXMuZmxlZXQuZm9yRWFjaCgoYm9hdCxpKT0+e1xuICAgICAgICAgICAgaWYgKCFib2F0LnBvc2l0aW9uLmluY2x1ZGVzKGxvY2F0aW9uKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGJvYXQuaGl0KGxvY2F0aW9uKVxuICAgICAgICAgICAgICAgIGlmICghYm9hdC5pc1N1bmsoKSl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mbGVldC5zcGxpY2UoaSwxKVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtib2F0Lm5hbWV9IHNhbmtgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgIH1cblxuICAgIHBsYWNlU2hpcChsb2NhdGlvbiwgc2hpcE5hbWUsIGF4aXMpe1xuICAgICAgICBsZXQgc2hpcCA9IG5ldyBTaGlwKHNoaXBOYW1lLCB0aGlzLnNoaXBzW3NoaXBOYW1lXSlcbiAgICAgICAgbGV0IGxvY2F0aW9uQXJyYXkgPSB0aGlzLmNyZWF0ZUxvY2F0aW9uQXJyYXkobG9jYXRpb24sIHNoaXBOYW1lLCBheGlzKVxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRQbGFjZW1lbnQobG9jYXRpb25BcnJheSkpe1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbkFycmF5LmZvckVhY2gobG9jID0+e1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW2xvY10uaGFzU2hpcCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgc2hpcC5wb3NpdGlvbi5wdXNoKGxvYylcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB0aGlzLmZsZWV0LnB1c2goc2hpcClcbiAgICB9XG5cbiAgICBjcmVhdGVMb2NhdGlvbkFycmF5KGxvY2F0aW9uLCBzaGlwTmFtZSwgYXhpcyl7XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uQXJyYXkgPSBbXVxuICAgICAgICBpZiAoYXhpcyAhPT0gJ3gnKXtcbiAgICAgICAgICAgIGZvcihsZXQgaT0wOyBpIDwgdGhpcy5zaGlwc1tzaGlwTmFtZV07aSsrKXtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbkFycmF5LnB1c2gobG9jYXRpb24gKyBpICogMTApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGZvcihsZXQgaT0wOyBpIDwgdGhpcy5zaGlwc1tzaGlwTmFtZV07aSsrKXtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbkFycmF5LnB1c2gobG9jYXRpb24gKyBpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhdGlvbkFycmF5XG4gICAgfVxuXG4gICAgaXNWYWxpZFBsYWNlbWVudCAobG9jYXRpb25BcnJheSl7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB3YWxsID0gWzksMTksMjksMzksNDksNTksNjksNzksODldXG5cbiAgICAgICAgaWYgKGxvY2F0aW9uQXJyYXkubGVuZ3RoIDw9MCl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBpZihsb2NhdGlvbkFycmF5LnNvbWUoKGxvYykgPT4gIXRoaXMuYm9hcmRbbG9jXSkpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2F0aW9uQXJyYXkuc29tZSgobG9jKT0+dGhpcy5ib2FyZFtsb2NdLmhhc1NoaXApKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHdhbGwuc29tZSgobnVtKT0+e1xuICAgICAgICAgICAgICAgIHJldHVybiBbbnVtLCBudW0rMV0uZXZlcnkoKGNvbWJvKT0+bG9jYXRpb25BcnJheS5pbmNsdWRlcyhjb21ibykpXG4gICAgICAgICAgICB9KVxuICAgICAgICApICAge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBjb21wdXRlclNoaXBQbGFjZW1lbnQoKXtcbiAgICAgICAgbGV0IGF4aXMgPSBbJ3gnLCd5J11cblxuICAgICAgICBsZXQgc2hpcE5hbWVzID0gT2JqZWN0LmtleXModGhpcy5zaGlwcylcblxuICAgICAgICBzaGlwTmFtZXMuZm9yRWFjaChzaGlwTmFtZSA9PntcbiAgICAgICAgICAgIGxldCBsb2NhdGlvbkFycmF5ID0gW11cbiAgICAgICAgICAgIGxldCByYW5kb21Mb2MgPScnXG4gICAgICAgICAgICBsZXQgcmFuZG9tQXhpcyA9JydcblxuICAgICAgICAgICAgd2hpbGUgKCF0aGlzLmlzVmFsaWRQbGFjZW1lbnQobG9jYXRpb25BcnJheSkpe1xuICAgICAgICAgICAgICAgIHJhbmRvbUxvYyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSo5OSlcbiAgICAgICAgICAgICAgICByYW5kb21BeGlzID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjIpXG4gICAgICAgICAgICAgICAgbG9jYXRpb25BcnJheSA9IHRoaXMuY3JlYXRlTG9jYXRpb25BcnJheShcbiAgICAgICAgICAgICAgICAgICAgcmFuZG9tTG9jLCBcbiAgICAgICAgICAgICAgICAgICAgc2hpcE5hbWUsIFxuICAgICAgICAgICAgICAgICAgICBheGlzW3JhbmRvbUF4aXNdXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wbGFjZVNoaXAocmFuZG9tTG9jLCBzaGlwTmFtZSwgYXhpc1tyYW5kb21BeGlzXSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjb21wdXRlclR1cm4ob3Bwb25lbnQpe1xuICAgICAgICBjb25zdCBib3hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wbGF5ZXInKVxuXG4gICAgICAgIGxldCByYW5kb21Mb2MgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqOTkpXG5cbiAgICAgICAgb3Bwb25lbnQuZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2socmFuZG9tTG9jKVxuICAgICAgICBcbiAgICAgICAgYm94ZXNbcmFuZG9tTG9jXS5jbGFzc0xpc3QucmVtb3ZlKCdlbXB0eScpXG4gICAgICAgIGJveGVzW3JhbmRvbUxvY10uY2xhc3NMaXN0LmFkZCgnaGl0JylcbiAgICAgICAgaWYob3Bwb25lbnQuZ2FtZWJvYXJkLmJvYXJkW3JhbmRvbUxvY10uaGFzU2hpcCA9PT0gdHJ1ZSl7XG4gICAgICAgICAgICBib3hlc1tyYW5kb21Mb2NdLmNsYXNzTGlzdC5hZGQoJ3NoaXAtaGl0JylcbiAgICAgICAgICAgIGJveGVzW3JhbmRvbUxvY10uY2xhc3NMaXN0LnJlbW92ZSgnaGFzLXNoaXAnKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLndpbkNoZWNrKG9wcG9uZW50LmdhbWVib2FyZClcbiAgICB9XG5cbiAgICB3aW5DaGVjayhnYW1lYm9hcmQpe1xuICAgICAgICBpZiAoZ2FtZWJvYXJkLmZsZWV0Lmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDb21wdXRlciBXaW5zIWApXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7R2FtZWJvYXJkfSIsImltcG9ydCB7R2FtZWJvYXJkfSBmcm9tICcuL2dhbWVib2FyZCdcblxuY2xhc3MgUGxheWVyIHtcbiAgICBjb25zdHJ1Y3RvciAobmFtZSl7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICAgICAgdGhpcy5nYW1lYm9hcmQgPSBuZXcgR2FtZWJvYXJkXG4gICAgfVxuXG4gICAgdHVybiAobG9jYXRpb24sIGdhbWVib2FyZCl7XG4gICAgICAgIGlmIChnYW1lYm9hcmQuYm9hcmRbbG9jYXRpb25dLmlzSGl0ICE9PSB0cnVlKXtcbiAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGxvY2F0aW9uKVxuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICB0aGlzLndpbkNoZWNrKGdhbWVib2FyZClcbiAgICAgICAgY29uc29sZS5sb2coZ2FtZWJvYXJkLmZsZWV0Lmxlbmd0aClcbiAgICB9XG5cbiAgICB3aW5DaGVjayhnYW1lYm9hcmQpe1xuICAgICAgICBpZiAoZ2FtZWJvYXJkLmZsZWV0Lmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke3RoaXMubmFtZX0gV2lucyFgKVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQge1BsYXllcn0iLCJpbXBvcnQge3NoaXBUeXBlc30gZnJvbSAnLi4vYXBwL3NoaXBUeXBlcydcblxuY2xhc3MgRE9NY29udHJvbGxlciB7XG5cbiAgICBjb25zdHJ1Y3RvciAoKXtcbiAgICAgICAgdGhpcy5zaGlwTmFtZXMgPSBPYmplY3Qua2V5cyhzaGlwVHlwZXMpXG4gICAgfVxuXG4gICAgc3RhcnRET00gKHBsYXllcjEsIHBsYXllcjIpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhcnQnKVxuXG4gICAgICAgIHN0YXJ0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT57XG4gICAgICAgICAgICB0aGlzLmNsZWFyR2FtZUJveCgpXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUdhbWVib2FyZChwbGF5ZXIxKVxuICAgICAgICAgICAgdGhpcy5jcmVhdGVQbGF5ZXJQbGFjZW1lbnRVSShwbGF5ZXIxLCBwbGF5ZXIyKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHN0YXJ0R2FtZShwbGF5ZXIxLCBwbGF5ZXIyKXtcbiAgICAgICAgcGxheWVyMi5nYW1lYm9hcmQuY29tcHV0ZXJTaGlwUGxhY2VtZW50KClcbiAgICAgICAgdGhpcy5jbGVhckdhbWVCb3goKVxuICAgICAgICB0aGlzLmNyZWF0ZUdhbWVib2FyZChwbGF5ZXIxKVxuICAgICAgICB0aGlzLmNyZWF0ZUdhbWVib2FyZChwbGF5ZXIyKVxuICAgIH1cbiAgICBcbiAgICBjbGVhckdhbWVCb3goKXtcbiAgICAgICAgY29uc3QgZ2FtZUJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lLWJveCcpXG4gICAgICAgIHdoaWxlKGdhbWVCb3guaGFzQ2hpbGROb2RlcygpKXtcbiAgICAgICAgICAgIGdhbWVCb3gucmVtb3ZlQ2hpbGQoZ2FtZUJveC5sYXN0Q2hpbGQpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVHYW1lYm9hcmQocGxheWVyKXtcbiAgICAgICAgY29uc3QgZ2FtZUJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lLWJveCcpXG4gICAgICAgIGNvbnN0IGdhbWVib2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cbiAgICAgICAgZ2FtZUJveC5hcHBlbmRDaGlsZChnYW1lYm9hcmQpXG4gICAgICAgIGdhbWVib2FyZC5jbGFzc05hbWUgPSAnZ2FtZWJvYXJkJ1xuXG4gICAgICAgIGdhbWVib2FyZC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1ncmlkLXJvd3MnLCAxMClcbiAgICAgICAgZ2FtZWJvYXJkLnN0eWxlLnNldFByb3BlcnR5KCctLWdyaWQtY29scycsIDEwKVxuICAgICAgICBwbGF5ZXIuZ2FtZWJvYXJkLmJvYXJkLmZvckVhY2goKGJveCxpKSA9PiB7XG4gICAgICAgICAgICBsZXQgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgICAgICAgIGRpdi5kYXRhc2V0LmluZGV4ID0gaVxuICAgICAgICAgICAgZ2FtZWJvYXJkLmFwcGVuZENoaWxkKGRpdikuY2xhc3NMaXN0LmFkZCgnYm94JywgJ2VtcHR5JywgYCR7cGxheWVyLm5hbWV9YClcbiAgICAgICAgICAgIGlmKHBsYXllci5uYW1lID09PSAncGxheWVyJyl7XG4gICAgICAgICAgICAgICAgaWYoYm94Lmhhc1NoaXApe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoJ2hhcy1zaGlwJylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwbGF5ZXJUdXJuKGF0dGFja2luZ1BsYXllciwgcmVjaWV2aW5nUGxheWVyKXtcbiAgICAgICAgaWYoYXR0YWNraW5nUGxheWVyLm5hbWUgPT09ICdjb21wdXRlcicpe1xuICAgICAgICAgICAgYXR0YWNraW5nUGxheWVyLmdhbWVib2FyZC5jb21wdXRlclR1cm4ocmVjaWV2aW5nUGxheWVyKVxuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICBjb25zdCBib3hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYC4ke3JlY2lldmluZ1BsYXllci5uYW1lfWApXG4gICAgICAgICAgICBib3hlcy5mb3JFYWNoKChib3gsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBib3guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgICAgICAgICAgICAgICAgICBhdHRhY2tpbmdQbGF5ZXIudHVybihpLCByZWNpZXZpbmdQbGF5ZXIuZ2FtZWJvYXJkKVxuICAgICAgICAgICAgICAgICAgICBib3guY2xhc3NMaXN0LnJlbW92ZSgnZW1wdHknKVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2hvdCcpXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWNpZXZpbmdQbGF5ZXIuZ2FtZWJvYXJkLmJvYXJkW2ldLmhhc1NoaXAgIT09IHRydWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LmNsYXNzTGlzdC5hZGQoJ2hpdCcpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5jbGFzc0xpc3QuYWRkKCdzaGlwLWhpdCcpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVBsYXllclBsYWNlbWVudFVJKHBsYXllciwgcGxheWVyMil7XG4gICAgICAgIHRoaXMuY3JlYXRlUGxheWVySW5wdXRET01FbGVtZW50cygpXG4gICAgICAgIFxuICAgICAgICBjb25zdCBib3hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wbGF5ZXInKVxuICAgICAgICBjb25zdCBwbGF5ZXJJbnB1dERlc2NyaXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBsYXllci1pbnB1dC1kZXNjcmlwdGlvbicpXG4gICAgICAgIGNvbnN0IGF4aXNCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmF4aXMtYnV0dG9uJylcblxuICAgICAgICBsZXQgaT0wXG5cbiAgICAgICAgYXhpc0J1dHRvbnMuZm9yRWFjaChidXR0b249PntcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VBY3RpdmVBeGlzKGJ1dHRvbilcbiAgICAgICAgICAgIH0pfVxuICAgICAgICApXG5cbiAgICAgICAgYm94ZXMuZm9yRWFjaChib3ggPT57XG4gICAgICAgICAgICBpZihpPjUpe1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBib3guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgICAgICAgICAgICAgICAgICBsZXQgYXhpcyA9IHRoaXMuZ2V0QXhpcygpXG4gICAgICAgICAgICAgICAgICAgIGxldCBsb2NhdGlvbkFycmF5ID0gcGxheWVyLmdhbWVib2FyZC5jcmVhdGVMb2NhdGlvbkFycmF5KHBhcnNlSW50KGJveC5kYXRhc2V0LmluZGV4KSwgdGhpcy5zaGlwTmFtZXNbaV0sIGF4aXMpXG4gICAgICAgICAgICAgICAgICAgIGlmKCFwbGF5ZXIuZ2FtZWJvYXJkLmlzVmFsaWRQbGFjZW1lbnQobG9jYXRpb25BcnJheSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5nYW1lYm9hcmQucGxhY2VTaGlwKHBhcnNlSW50KGJveC5kYXRhc2V0LmluZGV4KSwgdGhpcy5zaGlwTmFtZXNbaV0sIGF4aXMpXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbkFycmF5LmZvckVhY2gobG9jID0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveGVzW2xvY10uY2xhc3NMaXN0LmFkZCgnaGFzLXNoaXAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGkrK1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGk8NSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVySW5wdXREZXNjcmlwdGlvbi5pbm5lclRleHQgPSBgUGxlYXNlIHBsYWNlIHlvdXI6ICR7dGhpcy5zaGlwTmFtZXNbaV19YFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVBsYXlHYW1lQnV0dG9uKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGxheUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydEdhbWUocGxheWVyLCBwbGF5ZXIyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNyZWF0ZVBsYXllcklucHV0RE9NRWxlbWVudHMoKXtcbiAgICAgICAgY29uc3QgZ2FtZUJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lLWJveCcpXG4gICAgICAgIGNvbnN0IHBsYXllcklucHV0Q29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgIGNvbnN0IHBsYXllcklucHV0RGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICBjb25zdCBheGlzQm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgICAgY29uc3QgeEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpXG4gICAgICAgIGNvbnN0IHlCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuXG4gICAgICAgIGdhbWVCb3guY2xhc3NOYW1lID0gJ3BsYXllci1pbnB1dCdcblxuICAgICAgICB4QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3gnLCAnYWN0aXZlJywgJ2F4aXMtYnV0dG9uJylcbiAgICAgICAgeEJ1dHRvbi5pbm5lckhUTUwgPSd4J1xuICAgICAgICB4QnV0dG9uLnZhbHVlID0gJ3gnXG5cbiAgICAgICAgeUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd5JywgJ2luYWN0aXZlJywgJ2F4aXMtYnV0dG9uJylcbiAgICAgICAgeUJ1dHRvbi5pbm5lckhUTUwgPSd5J1xuICAgICAgICB5QnV0dG9uLnZhbHVlID0gJ3knXG5cbiAgICAgICAgYXhpc0JveC5jbGFzc05hbWUgPSAnYXhpcy1ib3gnXG4gICAgICAgIGF4aXNCb3guYXBwZW5kQ2hpbGQoeEJ1dHRvbilcbiAgICAgICAgYXhpc0JveC5hcHBlbmRDaGlsZCh5QnV0dG9uKVxuXG4gICAgICAgIHBsYXllcklucHV0RGVzY3JpcHRpb24uY2xhc3NOYW1lID0gJ3BsYXllci1pbnB1dC1kZXNjcmlwdGlvbidcbiAgICAgICAgcGxheWVySW5wdXREZXNjcmlwdGlvbi5pbm5lclRleHQgPSAnUGxlYXNlIHBsYWNlIHlvdXI6IENhcnJpZXInXG4gICAgICAgIFxuICAgICAgICBwbGF5ZXJJbnB1dENvbnRlbnQuaWQgPSAncGxheWVyLWlucHV0LWNvbnRlbnQnXG4gICAgICAgIHBsYXllcklucHV0Q29udGVudC5hcHBlbmRDaGlsZChheGlzQm94KVxuICAgICAgICBwbGF5ZXJJbnB1dENvbnRlbnQuYXBwZW5kQ2hpbGQocGxheWVySW5wdXREZXNjcmlwdGlvbilcblxuICAgICAgICBnYW1lQm94LmFwcGVuZENoaWxkKHBsYXllcklucHV0Q29udGVudClcbiAgICB9XG5cbiAgICBjcmVhdGVQbGF5R2FtZUJ1dHRvbigpe1xuICAgICAgICBjb25zdCBwbGF5ZXJJbnB1dERlc2NyaXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBsYXllci1pbnB1dC1kZXNjcmlwdGlvbicpXG4gICAgICAgIGNvbnN0IHBsYXlCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgICAgICBjb25zdCBheGlzQm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmF4aXMtYm94JylcblxuICAgICAgICB3aGlsZShheGlzQm94Lmhhc0NoaWxkTm9kZXMoKSl7XG4gICAgICAgICAgICBheGlzQm94LnJlbW92ZUNoaWxkKGF4aXNCb3gubGFzdENoaWxkKVxuICAgICAgICAgICAgYXhpc0JveC5jbGFzc0xpc3QucmVtb3ZlKCdheGlzLWJveCcpXG4gICAgICAgIH1cblxuICAgICAgICBwbGF5QnV0dG9uLmlubmVySFRNTCA9ICdQbGF5J1xuICAgICAgICBwbGF5QnV0dG9uLmlkID0gJ3BsYXknXG4gICAgICAgIHBsYXllcklucHV0RGVzY3JpcHRpb24uaW5uZXJUZXh0ID0gJydcbiAgICAgICAgcGxheWVySW5wdXREZXNjcmlwdGlvbi5hcHBlbmRDaGlsZChwbGF5QnV0dG9uKVxuICAgIH1cblxuICAgIGNoYW5nZUFjdGl2ZUF4aXMoYnV0dG9uKXtcbiAgICAgICAgaWYgKGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ2luYWN0aXZlJykpe1xuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaW5hY3RpdmUnKVxuICAgICAgICAgICAgaWYgKGJ1dHRvbi52YWx1ZSA9PSAneCcpe1xuICAgICAgICAgICAgICAgIGxldCB5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnknKVxuICAgICAgICAgICAgICAgIHkuY2xhc3NMaXN0LmFkZCgnaW5hY3RpdmUnKVxuICAgICAgICAgICAgICAgIHkuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBsZXQgeCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy54JylcbiAgICAgICAgICAgICAgICB4LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXG4gICAgICAgICAgICAgICAgeC5jbGFzc0xpc3QuYWRkKCdpbmFjdGl2ZScpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0QXhpcygpe1xuICAgICAgICBsZXQgYWN0aXZlQXhpcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hY3RpdmUnKS52YWx1ZVxuXG4gICAgICAgIHJldHVybiBhY3RpdmVBeGlzXG4gICAgfVxufVxuXG5leHBvcnQge0RPTWNvbnRyb2xsZXJ9IiwiaW1wb3J0ICcuL3N0eWxlLmNzcydcbmltcG9ydCB7UGxheWVyfSBmcm9tICcuLi9zcmMvYXBwL3BsYXllcidcbmltcG9ydCB7RE9NY29udHJvbGxlcn0gZnJvbSAnLi9ET00vRE9Nc2NyaXB0cydcblxuY2xhc3MgQmF0dGxlc2hpcCB7XG5cbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLnBsYXllcjEgPSBuZXcgUGxheWVyKCdwbGF5ZXInKVxuICAgICAgICB0aGlzLnBsYXllcjIgPSBuZXcgUGxheWVyKCdjb21wdXRlcicpXG4gICAgICAgIHRoaXMuRE9NY29udHJvbGxlciA9IG5ldyBET01jb250cm9sbGVyKHRoaXMucGxheWVyMSwgdGhpcy5wbGF5ZXIyKVxuICAgIH1cblxuICAgIHJ1bigpe1xuICAgICAgICB0aGlzLkRPTWNvbnRyb2xsZXIuc3RhcnRET00odGhpcy5wbGF5ZXIxLCB0aGlzLnBsYXllcjIpXG4gICAgfVxufVxuXG5sZXQgZ2FtZSA9IG5ldyBCYXR0bGVzaGlwXG5nYW1lLnJ1bigpIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJTaGlwIiwiY29uc3RydWN0b3IiLCJuYW1lIiwic2l6ZSIsInBvc2l0aW9uIiwiYmVlbkhpdCIsImhpdCIsIm51bSIsImluY2x1ZGVzIiwiaXNTdW5rIiwiZXZlcnkiLCJzaGlwVHlwZXMiLCJHYW1lYm9hcmQiLCJib2FyZCIsInNoaXBzIiwiZmxlZXQiLCJidWlsZCIsImhhc1NoaXAiLCJpc0hpdCIsInJlY2VpdmVBdHRhY2siLCJsb2NhdGlvbiIsImF0dGFja1NoaXAiLCJmb3JFYWNoIiwiYm9hdCIsImNvbnNvbGUiLCJsb2ciLCJwbGFjZVNoaXAiLCJzaGlwTmFtZSIsImF4aXMiLCJzaGlwIiwibG9jYXRpb25BcnJheSIsImNyZWF0ZUxvY2F0aW9uQXJyYXkiLCJpc1ZhbGlkUGxhY2VtZW50IiwibG9jIiwic29tZSIsImNvbWJvIiwiY29tcHV0ZXJTaGlwUGxhY2VtZW50Iiwia2V5cyIsInJhbmRvbUxvYyIsInJhbmRvbUF4aXMiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJjb21wdXRlclR1cm4iLCJvcHBvbmVudCIsImJveGVzIiwicXVlcnlTZWxlY3RvckFsbCIsImdhbWVib2FyZCIsImNsYXNzTGlzdCIsImFkZCIsIndpbkNoZWNrIiwiUGxheWVyIiwidHVybiIsIkRPTWNvbnRyb2xsZXIiLCJzaGlwTmFtZXMiLCJzdGFydERPTSIsInBsYXllcjEiLCJwbGF5ZXIyIiwiZ2V0RWxlbWVudEJ5SWQiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xlYXJHYW1lQm94IiwiY3JlYXRlR2FtZWJvYXJkIiwiY3JlYXRlUGxheWVyUGxhY2VtZW50VUkiLCJzdGFydEdhbWUiLCJnYW1lQm94IiwiaGFzQ2hpbGROb2RlcyIsImxhc3RDaGlsZCIsInBsYXllciIsImNsYXNzTmFtZSIsInNldFByb3BlcnR5IiwiYm94IiwiZGl2IiwiZGF0YXNldCIsInBsYXllclR1cm4iLCJhdHRhY2tpbmdQbGF5ZXIiLCJyZWNpZXZpbmdQbGF5ZXIiLCJjcmVhdGVQbGF5ZXJJbnB1dERPTUVsZW1lbnRzIiwicGxheWVySW5wdXREZXNjcmlwdGlvbiIsImF4aXNCdXR0b25zIiwiYnV0dG9uIiwiY2hhbmdlQWN0aXZlQXhpcyIsImdldEF4aXMiLCJwYXJzZUludCIsImlubmVyVGV4dCIsImNyZWF0ZVBsYXlHYW1lQnV0dG9uIiwicGxheWVySW5wdXRDb250ZW50IiwiYXhpc0JveCIsInhCdXR0b24iLCJ5QnV0dG9uIiwiaW5uZXJIVE1MIiwidmFsdWUiLCJwbGF5QnV0dG9uIiwiY29udGFpbnMiLCJ5IiwieCIsInJ1biJdLCJzb3VyY2VSb290IjoiIn0=